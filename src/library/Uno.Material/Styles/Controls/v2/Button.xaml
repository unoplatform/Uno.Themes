<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:um="using:Uno.Material"
					xmlns:toolkit="using:Uno.UI.Toolkit"
					xmlns:not_win="http://uno.ui/not_win"
					mc:Ignorable="d not_win">

	<!-- Converters -->
	<um:FromNullToValueConverter x:Key="MaterialNullToTextButtonMarginConverter"
								 NotNullValue="0,0,2,0"
								 NullValue="0" />

	<!-- Brushes -->
	<StaticResource x:Key="MaterialOutlinedButtonBorderBrush"
					ResourceKey="OutlineBrush" />

	<!-- Variables -->
	<x:Double x:Key="MaterialButtonMinHeight">40</x:Double>
	<x:Double x:Key="MaterialButtonMinWidth">40</x:Double>
	<Thickness x:Key="MaterialButtonPadding">16,0</Thickness>
	<Thickness x:Key="MaterialTextButtonPadding">12,0</Thickness>
	<Thickness x:Key="MaterialButtonBorderThickness">0</Thickness>
	<Thickness x:Key="MaterialOutlinedButtonBorderThickness">1</Thickness>
	<CornerRadius x:Key="MaterialButtonCornerRadius">20</CornerRadius>
	<x:String x:Key="MaterialButtonVerticalContentAlignment">Center</x:String>
	<x:String x:Key="MaterialButtonHorizontalContentAlignment">Center</x:String>


	<!-- BASE -->
	<Style x:Key="MaterialBaseButtonStyle"
		   TargetType="Button">

		<!--Start: Label Large Typo-->
		<Setter Property="FontFamily"
				Value="{ThemeResource MaterialMediumFontFamily}" />
		<Setter Property="FontWeight"
				Value="{ThemeResource LabelLargeFontWeight}" />
		<Setter Property="FontSize"
				Value="{ThemeResource LabelLargeFontSize}" />
		<Setter Property="CharacterSpacing"
				Value="{ThemeResource LabelLargeCharacterSpacing}" />
		<!--End: Label Large Typo-->

		<Setter Property="MinHeight"
				Value="{StaticResource MaterialButtonMinHeight}" />
		<Setter Property="MinWidth"
				Value="{StaticResource MaterialButtonMinWidth}" />
		<Setter Property="Padding"
				Value="{StaticResource MaterialButtonPadding}" />
		<Setter Property="CornerRadius"
				Value="{StaticResource MaterialButtonCornerRadius}" />
		<Setter Property="BorderThickness"
				Value="{StaticResource MaterialButtonBorderThickness}" />
		<Setter Property="VerticalContentAlignment"
				Value="{StaticResource MaterialButtonVerticalContentAlignment}" />
		<Setter Property="HorizontalContentAlignment"
				Value="{StaticResource MaterialButtonHorizontalContentAlignment}" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon"
				Value="{x:Null}" />
	</Style>

	<!-- ELEVATED -->
	<Style x:Key="MaterialElevatedButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground"
				Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="Background"
				Value="{ThemeResource SurfaceBrush}" />
		<Setter Property="um:ControlExtensions.Elevation"
				Value="1" />
		<Setter Property="um:ControlExtensions.TintedBackground"
				Value="{x:Null}" />
		<Setter Property="um:ControlExtensions.IsTintEnabled"
				Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">

					<toolkit:ElevatedView x:Name="ElevatedView"
										  Margin="0,0,0,1"
										  Elevation="{Binding Path=(um:ControlExtensions.Elevation), RelativeSource={RelativeSource TemplatedParent}}"
										  CornerRadius="{TemplateBinding CornerRadius}"
										  Background="Transparent">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">

								<VisualState x:Name="Normal" />

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.Background"
												Value="{ThemeResource OnSurfaceDisabledLowBrush}" />
										<Setter Target="IconPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ElevatedView.Margin"
												Value="0" />
										<Setter Target="ElevatedView.Elevation"
												Value="0" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="Root"
							  Background="{Binding Path=(um:ControlExtensions.TintedBackground), RelativeSource={RelativeSource TemplatedParent}}"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="{TemplateBinding BorderThickness}"
							  CornerRadius="{TemplateBinding CornerRadius}">

							<Border x:Name="StateLayer"
									Background="Transparent"
									CornerRadius="{TemplateBinding CornerRadius}" />

							<um:Ripple x:Name="Ripple"
									   Feedback="{TemplateBinding Foreground}"
									   FeedbackOpacity="{StaticResource PressedOpacity}"
									   CornerRadius="{TemplateBinding CornerRadius}"
									   Padding="{TemplateBinding Padding}"
									   AutomationProperties.AccessibilityView="Raw"
									   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
								<um:Ripple.Content>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
										</Grid.ColumnDefinitions>

										<ContentPresenter x:Name="IconPresenter"
														  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
														  MinWidth="18"
														  HorizontalAlignment="Stretch"
														  VerticalAlignment="Stretch"
														  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
														  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
														  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />

										<ContentPresenter x:Name="ContentPresenter"
														  Grid.Column="1"
														  Margin="8,0"
														  Content="{TemplateBinding Content}"
														  ContentTemplate="{TemplateBinding ContentTemplate}"
														  ContentTransitions="{TemplateBinding ContentTransitions}"
														  FontFamily="{TemplateBinding FontFamily}"
														  FontSize="{TemplateBinding FontSize}"
														  FontWeight="{TemplateBinding FontWeight}"
														  CharacterSpacing="{TemplateBinding CharacterSpacing}"
														  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
														  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
									</Grid>
								</um:Ripple.Content>
							</um:Ripple>
						</Grid>
					</toolkit:ElevatedView>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- FILLED -->
	<Style x:Key="MaterialFilledButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground"
				Value="{ThemeResource OnPrimaryBrush}" />
		<Setter Property="Background"
				Value="{ThemeResource PrimaryBrush}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">

					<toolkit:ElevatedView x:Name="ElevatedView"
										  Margin="0"
										  Elevation="0"
										  CornerRadius="{TemplateBinding CornerRadius}"
										  Background="Transparent">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">

								<VisualState x:Name="Normal" />

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnPrimaryHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnPrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.Background"
												Value="{ThemeResource OnSurfaceDisabledLowBrush}" />
										<Setter Target="IconPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnPrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnPrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="Root"
							  Background="{TemplateBinding Background}"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="{TemplateBinding BorderThickness}"
							  CornerRadius="{TemplateBinding CornerRadius}">

							<Border x:Name="StateLayer"
									Background="Transparent"
									CornerRadius="{TemplateBinding CornerRadius}" />

							<um:Ripple x:Name="Ripple"
									   Feedback="{TemplateBinding Foreground}"
									   FeedbackOpacity="{StaticResource PressedOpacity}"
									   CornerRadius="{TemplateBinding CornerRadius}"
									   Padding="{TemplateBinding Padding}"
									   AutomationProperties.AccessibilityView="Raw"
									   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
								<um:Ripple.Content>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
										</Grid.ColumnDefinitions>

										<ContentPresenter x:Name="IconPresenter"
														  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
														  MinWidth="18"
														  HorizontalAlignment="Stretch"
														  VerticalAlignment="Stretch"
														  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
														  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
														  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />

										<ContentPresenter x:Name="ContentPresenter"
														  Grid.Column="1"
														  Margin="8,0"
														  Content="{TemplateBinding Content}"
														  ContentTemplate="{TemplateBinding ContentTemplate}"
														  ContentTransitions="{TemplateBinding ContentTransitions}"
														  FontFamily="{TemplateBinding FontFamily}"
														  FontSize="{TemplateBinding FontSize}"
														  FontWeight="{TemplateBinding FontWeight}"
														  CharacterSpacing="{TemplateBinding CharacterSpacing}"
														  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
														  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
									</Grid>
								</um:Ripple.Content>
							</um:Ripple>
						</Grid>
					</toolkit:ElevatedView>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- FILLED TONAL-->
	<Style x:Key="MaterialFilledTonalButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground"
				Value="{ThemeResource OnSecondaryContainerBrush}" />
		<Setter Property="Background"
				Value="{ThemeResource SecondaryContainerBrush}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">

					<toolkit:ElevatedView x:Name="ElevatedView"
										  Margin="0"
										  Elevation="0"
										  CornerRadius="{TemplateBinding CornerRadius}"
										  Background="Transparent">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">

								<VisualState x:Name="Normal" />

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnSecondaryContainerHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnSecondaryContainerPressedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.Background"
												Value="{ThemeResource OnSurfaceDisabledLowBrush}" />
										<Setter Target="IconPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnSecondaryContainerFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource OnSecondaryContainerFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid x:Name="Root"
							  Background="{TemplateBinding Background}"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="{TemplateBinding BorderThickness}"
							  CornerRadius="{TemplateBinding CornerRadius}">

							<Border x:Name="StateLayer"
									Background="Transparent"
									CornerRadius="{TemplateBinding CornerRadius}" />

							<um:Ripple x:Name="Ripple"
									   Feedback="{TemplateBinding Foreground}"
									   FeedbackOpacity="{StaticResource PressedOpacity}"
									   CornerRadius="{TemplateBinding CornerRadius}"
									   Padding="{TemplateBinding Padding}"
									   AutomationProperties.AccessibilityView="Raw"
									   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
								<um:Ripple.Content>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
										</Grid.ColumnDefinitions>

										<ContentPresenter x:Name="IconPresenter"
														  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
														  MinWidth="18"
														  HorizontalAlignment="Stretch"
														  VerticalAlignment="Stretch"
														  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
														  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
														  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />

										<ContentPresenter x:Name="ContentPresenter"
														  Grid.Column="1"
														  Margin="8,0"
														  Content="{TemplateBinding Content}"
														  ContentTemplate="{TemplateBinding ContentTemplate}"
														  ContentTransitions="{TemplateBinding ContentTransitions}"
														  FontFamily="{TemplateBinding FontFamily}"
														  FontSize="{TemplateBinding FontSize}"
														  FontWeight="{TemplateBinding FontWeight}"
														  CharacterSpacing="{TemplateBinding CharacterSpacing}"
														  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
														  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
									</Grid>
								</um:Ripple.Content>
							</um:Ripple>
						</Grid>
					</toolkit:ElevatedView>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- OUTLINED-->
	<Style x:Key="MaterialOutlinedButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground"
				Value="{ThemeResource PrimaryBrush}" />
		<!-- Following Material M3 Guidelines and Uno Figma file: -->
		<!-- Background is Optional and Default is Transparent -->
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="{StaticResource MaterialOutlinedButtonBorderThickness}" />
		<Setter Property="BorderBrush"
				Value="{ThemeResource MaterialOutlinedButtonBorderBrush}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">

					<Grid x:Name="Root"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">

								<VisualState x:Name="Normal" />

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.BorderBrush"
												Value="{ThemeResource OnSurfaceDisabledLowBrush}" />
										<Setter Target="IconPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Border x:Name="StateLayer"
								Background="Transparent"
								CornerRadius="{TemplateBinding CornerRadius}" />

						<um:Ripple x:Name="Ripple"
								   Feedback="{TemplateBinding Foreground}"
								   FeedbackOpacity="{StaticResource PressedOpacity}"
								   CornerRadius="{TemplateBinding CornerRadius}"
								   Padding="{TemplateBinding Padding}"
								   AutomationProperties.AccessibilityView="Raw"
								   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
							<um:Ripple.Content>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>

									<ContentPresenter x:Name="IconPresenter"
													  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
													  MinWidth="18"
													  HorizontalAlignment="Stretch"
													  VerticalAlignment="Stretch"
													  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
													  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
													  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />

									<ContentPresenter x:Name="ContentPresenter"
													  Grid.Column="1"
													  Margin="8,0"
													  Content="{TemplateBinding Content}"
													  ContentTemplate="{TemplateBinding ContentTemplate}"
													  ContentTransitions="{TemplateBinding ContentTransitions}"
													  FontFamily="{TemplateBinding FontFamily}"
													  FontSize="{TemplateBinding FontSize}"
													  FontWeight="{TemplateBinding FontWeight}"
													  CharacterSpacing="{TemplateBinding CharacterSpacing}"
													  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
													  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
								</Grid>
							</um:Ripple.Content>
						</um:Ripple>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TEXT -->
	<Style x:Key="MaterialTextButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">

		<Setter Property="Foreground"
				Value="{ThemeResource PrimaryBrush}" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Padding"
				Value="{StaticResource MaterialTextButtonPadding}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">

					<Grid x:Name="Root"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">

								<VisualState x:Name="Normal" />

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryPressedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="IconPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
										<Setter Target="ContentPresenter.Foreground"
												Value="{ThemeResource OnSurfaceDisabledBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="PointerFocused">
									<VisualState.Setters>
										<Setter Target="StateLayer.Background"
												Value="{ThemeResource PrimaryFocusedBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Border x:Name="StateLayer"
								Background="Transparent"
								CornerRadius="{TemplateBinding CornerRadius}" />

						<um:Ripple x:Name="Ripple"
								   Feedback="{TemplateBinding Foreground}"
								   FeedbackOpacity="{StaticResource PressedOpacity}"
								   CornerRadius="{TemplateBinding CornerRadius}"
								   Padding="{TemplateBinding Padding}"
								   AutomationProperties.AccessibilityView="Raw"
								   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
							<um:Ripple.Content>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>

									<ContentPresenter x:Name="IconPresenter"
													  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
													  MinWidth="18"
													  Margin="0,0,8,0"
													  HorizontalAlignment="Stretch"
													  VerticalAlignment="Stretch"
													  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}"
													  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
													  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />

									<ContentPresenter x:Name="ContentPresenter"
													  Grid.Column="1"
													  Margin="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToTextButtonMarginConverter}, FallbackValue=0, TargetNullValue=0}"
													  Content="{TemplateBinding Content}"
													  ContentTemplate="{TemplateBinding ContentTemplate}"
													  ContentTransitions="{TemplateBinding ContentTransitions}"
													  FontFamily="{TemplateBinding FontFamily}"
													  FontSize="{TemplateBinding FontSize}"
													  FontWeight="{TemplateBinding FontWeight}"
													  CharacterSpacing="{TemplateBinding CharacterSpacing}"
													  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
													  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
								</Grid>
							</um:Ripple.Content>
						</um:Ripple>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ICON BUTTON -->
	<Style x:Key="MaterialIconButtonStyle"
		   BasedOn="{StaticResource MaterialBaseButtonStyle}"
		   TargetType="Button">
		<Setter Property="Foreground"
				Value="{ThemeResource OnSurfaceBrush}" />
		<Setter Property="Background"
				Value="Transparent" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid x:Name="RootGrid"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  CornerRadius="{TemplateBinding CornerRadius}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="HoverOverlay.Opacity"
												Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="PressedOverlay.Opacity"
												Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="FocusedOverlay.Opacity"
												Value="1" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Foreground"
												Value="{ThemeResource OnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<!-- Ellipse for PointedOver State -->
						<Ellipse x:Name="HoverOverlay"
								 HorizontalAlignment="Stretch"
								 VerticalAlignment="Stretch"
								 Fill="{ThemeResource PrimaryHoverBrush}"
								 Opacity="0" />

						<!-- Ellipse for Pressed State -->
						<Ellipse x:Name="PressedOverlay"
								 HorizontalAlignment="Stretch"
								 VerticalAlignment="Stretch"
								 Fill="{ThemeResource PrimaryPressedBrush}"
								 Opacity="0" />

						<!-- Ellipse for Focused State -->
						<Ellipse x:Name="FocusedOverlay"
								 HorizontalAlignment="Stretch"
								 VerticalAlignment="Stretch"
								 Fill="{ThemeResource PrimaryFocusedBrush}"
								 Opacity="0" />

						<!-- Content -->
						<ContentPresenter x:Name="ContentPresenter"
										  AutomationProperties.AccessibilityView="Raw"
										  Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
