<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:not_macos="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:macos="http://uno.ui/macos"
					xmlns:um="using:Uno.Material"
					mc:Ignorable="d macos">

	<!-- Converters -->
	<um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformTranslateY"
										NotNullOrEmptyValue="5"
										NullOrEmptyValue="0" />

	<!-- Path Data -->
	<x:String x:Key="M3ClearGlyphPathData">M10 0C4.47 0 0 4.47 0 10C0 15.53 4.47 20 10 20C15.53 20 20 15.53 20 10C20 4.47 15.53 0 10 0ZM10 18C5.59 18 2 14.41 2 10C2 5.59 5.59 2 10 2C14.41 2 18 5.59 18 10C18 14.41 14.41 18 10 18ZM10 8.59L13.59 5L15 6.41L11.41 10L15 13.59L13.59 15L10 11.41L6.41 15L5 13.59L8.59 10L5 6.41L6.41 5L10 8.59Z</x:String>
	<SolidColorBrush x:Key="M3MaterialDisabledOutlinedTextBoxBorderBrush"
                     Opacity="0.12"
                     Color="{ThemeResource OnSurfaceColor}" />

	<Style x:Name="M3MaterialDeleteButtonStyle"
		   TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid x:Name="ButtonLayoutGrid"
						  Background="Transparent">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ButtonLayoutGrid.Opacity"
												Value="0" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Path x:Name="GlyphElement"
							  Data="{StaticResource M3ClearGlyphPathData}"
							  Fill="{StaticResource OnSurfaceVariantBrush}"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center"
							  Stretch="Uniform"
							  Width="16"
							  Height="16"
							  AutomationProperties.AccessibilityView="Raw" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="M3MaterialFilledTextBoxStyle"
		   TargetType="TextBox">
		<Setter Property="FontFamily"
				Value="{StaticResource MaterialRegularFontFamily}" />
		<Setter Property="Foreground"
				Value="{StaticResource OnSurfaceBrush}" />
		<Setter Property="PlaceholderForeground"
				Value="{StaticResource OnSurfaceVariantBrush}" />
		<Setter Property="Background"
				Value="{StaticResource SurfaceVariantBrush}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource OnSurfaceBrush}" />
		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="CornerRadius"
				Value="4 4 0 0" />
		<macos:Setter Property="Padding"
					  Value="12,4" />

		<not_macos:Setter Property="Padding"
						  Value="12,16" />

		<Setter Property="MinHeight"
				Value="50" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon"
				Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Grid x:Name="Root"
						  Background="{TemplateBinding Background}"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="NormalBorder.Fill"
												Value="{StaticResource OnSurfaceBrush}" />
										<Setter Target="ContentElement.Foreground"
												Value="{StaticResource OnSurfaceBrush}" />
										<Setter Target="PlaceholderElement.Foreground"
												Value="{StaticResource OnSurfaceBrush}" />
										<Setter Target="Root.Background"
												Value="{StaticResource OnSecondaryContainerHoverBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground"
												Value="{StaticResource OnSurfaceVariantBrush}" />
										<Setter Target="NormalBorder.Fill"
												Value="{StaticResource PrimaryBrush}" />
									</VisualState.Setters>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="FocusedBorder_ScaleTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="1" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="DeleteButton.Visibility"
												Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="NotEmpty">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="-11" />
										<!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
										<DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
									</Storyboard>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="Empty">
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid Margin="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<ContentPresenter x:Name="IconPresenter"
											  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
											  HorizontalAlignment="Center"
											  Margin="0,0,8,0"
											  MaxHeight="34"
											  MaxWidth="34"
											  MinWidth="25"
											  not_macos:VerticalAlignment="Top"
											  macos:VerticalAlignment="Center"
											  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />


							<ScrollViewer x:Name="ContentElement"
										  Grid.Column="1"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
										  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
										  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
										  IsTabStop="False"
										  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
										  macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  not_macos:VerticalAlignment="Bottom"
										  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  ZoomMode="Disabled"
										  AutomationProperties.AccessibilityView="Raw">
								<ScrollViewer.RenderTransform>
									<CompositeTransform x:Name="ContentElement_CompositeTransform" />
								</ScrollViewer.RenderTransform>
							</ScrollViewer>

							<TextBlock x:Name="PlaceholderElement"
									   Grid.Column="1"
									   Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}"
									   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									   IsHitTestVisible="False"
									   RenderTransformOrigin="0,0.5"
									   Text="{TemplateBinding PlaceholderText}"
									   TextAlignment="{TemplateBinding TextAlignment}"
									   TextWrapping="{TemplateBinding TextWrapping}"
									   not_macos:VerticalAlignment="Top"
									   macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<TextBlock.RenderTransform>
									<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
								</TextBlock.RenderTransform>
							</TextBlock>

							<Button x:Name="DeleteButton"
									Grid.Column="2"
									Foreground="{StaticResource OnSurfaceVariantBrush}"
									IsTabStop="False"
									Style="{StaticResource M3MaterialDeleteButtonStyle}"
									not_macos:VerticalAlignment="Bottom"
									macos:VerticalAlignment="Stretch"
									Visibility="Collapsed"
									AutomationProperties.AccessibilityView="Raw" />
						</Grid>

						<Rectangle x:Name="NormalBorder"
								   Fill="{StaticResource OnSurfaceBrush}"
								   Height="{StaticResource TextBoxOutlinedStrokeWidth}"
								   VerticalAlignment="Bottom" />

						<Rectangle x:Name="FocusedBorder"
								   Fill="{StaticResource PrimaryBrush}"
								   Height="{StaticResource TextBoxFocusStrokeWidth}"
								   VerticalAlignment="Bottom"
								   not_macos:RenderTransformOrigin="0.5,0.5"
								   macos:RenderTransformOrigin="0.0,0.5">
							<Rectangle.RenderTransform>
								<ScaleTransform x:Name="FocusedBorder_ScaleTransform"
												ScaleX="0" />
							</Rectangle.RenderTransform>
						</Rectangle>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="M3MaterialOutlinedTextBoxStyle"
		   TargetType="TextBox">
		<Setter Property="FontFamily"
				Value="{StaticResource MaterialRegularFontFamily}" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="{StaticResource OnSurfaceBrush}" />
		<Setter Property="PlaceholderForeground"
				Value="{StaticResource OnSurfaceVariantBrush}" />
		<Setter Property="BorderBrush"
				Value="{StaticResource OutlineBrush}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="CornerRadius"
				Value="4" />

		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="12,4,8,4" />
		<Setter Property="MinHeight"
				Value="50" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="um:ControlExtensions.Icon"
				Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Grid x:Name="Root"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  CornerRadius="{TemplateBinding CornerRadius}"
						  Padding="{TemplateBinding Padding}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.BorderBrush"
												Value="{StaticResource M3MaterialDisabledOutlinedTextBoxBorderBrush}" />
										<Setter Target="ContentElement.Foreground"
												Value="{StaticResource OnSurfaceBrush}" />
										<Setter Target="PlaceholderElement.Foreground"
												Value="{StaticResource OnSurfaceBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="Root.BorderBrush"
												Value="{StaticResource PrimaryBrush}" />
										<Setter Target="PlaceholderElement.Foreground"
												Value="{StaticResource OnSurfaceVariantBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="DeleteButton.Visibility"
												Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="NotEmpty">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="-11" />
										<!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
										<DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
									</Storyboard>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="Empty">
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<ContentPresenter x:Name="IconPresenter"
										  Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
										  HorizontalAlignment="Center"
										  MaxHeight="34"
										  MaxWidth="34"
										  MinWidth="25"
										  Margin="0,0,8,0"
										  VerticalAlignment="Center"
										  Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />

						<ScrollViewer x:Name="ContentElement"
									  Grid.Column="1"
									  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
									  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
									  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
									  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
									  IsTabStop="False"
									  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
									  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
									  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									  ZoomMode="Disabled"
									  AutomationProperties.AccessibilityView="Raw">
							<ScrollViewer.RenderTransform>
								<CompositeTransform x:Name="ContentElement_CompositeTransform" />
							</ScrollViewer.RenderTransform>
						</ScrollViewer>

						<TextBlock x:Name="PlaceholderElement"
								   Grid.Column="1"
								   Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}"
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								   IsHitTestVisible="False"
								   RenderTransformOrigin="0,0.5"
								   Text="{TemplateBinding PlaceholderText}"
								   TextAlignment="{TemplateBinding TextAlignment}"
								   TextWrapping="{TemplateBinding TextWrapping}"
								   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<TextBlock.RenderTransform>
								<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
							</TextBlock.RenderTransform>
						</TextBlock>

						<Button x:Name="DeleteButton"
								Grid.Column="2"
								Foreground="{StaticResource OnSurfaceVariantBrush}"
								IsTabStop="False"
								Style="{StaticResource M3MaterialDeleteButtonStyle}"
								VerticalAlignment="Stretch"
								Visibility="Collapsed"
								AutomationProperties.AccessibilityView="Raw" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
