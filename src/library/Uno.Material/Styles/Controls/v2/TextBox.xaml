<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:not_macos="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:macos="http://uno.ui/macos"
					xmlns:um="using:Uno.Material"
					xmlns:ut="using:Uno.Themes"
					mc:Ignorable="d macos">

	<!--
		NOTE:
		Expected TextBox behavior:
		We are going a different route than the Official Material M2/M3 Google samples & the Material doc regarding the fact that the Placeholder will always be visible.
		(cf. specs discussions here https://github.com/unoplatform/Uno.Themes/issues/974)
		
		- Without Header/Placeholder: Simple TextBox
		
		- With placeholder but no header: The placeholder will be displayed where the text is supposed to be until the text is inputted
		
		- With header but no placeholder: The header will be displayed where the text is supposed to be and will move up when text is inputted
		
		- With header and placeholder: The header will be displayed at the top, and the placeholder will be displayed where the text is supposed to be until the text is inputted
	-->
	<ResourceDictionary.ThemeDictionaries>
		<ResourceDictionary x:Key="Default">
			<!--#region Fille Delete Button Brushes-->
			<StaticResource x:Key="TextBoxDeleteButtonForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxDeleteButtonForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxDeleteButtonForegroundPressed" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxDeleteButtonForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Leading Icon Brushes-->
			<StaticResource x:Key="TextBoxLeadingIconForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxLeadingIconForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Filled TextBox Brushes-->
			<StaticResource x:Key="FilledTextBoxBackground" ResourceKey="SurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxBackgroundPointerOver" ResourceKey="OnSurfaceVariantHoverBrush" />
			<StaticResource x:Key="FilledTextBoxBackgroundFocused" ResourceKey="SurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxBackgroundDisabled" ResourceKey="OnSurfaceDisabledBrush" />

			<StaticResource x:Key="FilledTextBoxBorderBrush" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxBorderBrushPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxBorderBrushFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="FilledTextBoxBorderBrushDisabled" ResourceKey="OnSurfaceDisabledBrush" />

			<StaticResource x:Key="FilledTextBoxDeleteButtonForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxDeleteButtonForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxDeleteButtonForegroundFocused" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxDeleteButtonForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />

			<StaticResource x:Key="FilledTextBoxForeground" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<!-- In this case the opacity is not applied to the brush directly - known issue for ContentElement -->
			<StaticResource x:Key="FilledTextBoxForegroundDisabled" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxForegroundOpacityDisabled" ResourceKey="LowOpacity" />

			<StaticResource x:Key="FilledTextBoxPlaceholderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxPlaceholderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxPlaceholderForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxPlaceholderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />

			<StaticResource x:Key="FilledTextBoxHeaderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxHeaderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxHeaderForegroundFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="FilledTextBoxHeaderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Outlined TextBox Brushes-->
			<StaticResource x:Key="OutlinedTextBoxBorderBrush" ResourceKey="OutlineBrush" />
			<StaticResource x:Key="OutlinedTextBoxBorderBrushPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxBorderBrushFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="OutlinedTextBoxBorderBrushDisabled" ResourceKey="OnSurfaceDisabledBrush" />

			<StaticResource x:Key="OutlinedTextBoxForeground" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<!-- In this case the opacity is not applied to the brush directly - known issue for ContentElement -->
			<StaticResource x:Key="OutlinedTextBoxForegroundDisabled" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxForegroundOpacityDisabled" ResourceKey="LowOpacity" />

			<StaticResource x:Key="OutlinedTextBoxPlaceholderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxPlaceholderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxPlaceholderForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxPlaceholderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />

			<StaticResource x:Key="OutlinedTextBoxHeaderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxHeaderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxHeaderForegroundFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="OutlinedTextBoxHeaderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Typo-->
			<StaticResource x:Key="OutlinedTextBoxFontFamily" ResourceKey="BodyLargeFontFamily" />
			<StaticResource x:Key="OutlinedTextBoxFontWeight" ResourceKey="BodyLargeFontWeight" />
			<StaticResource x:Key="OutlinedTextBoxFontSize" ResourceKey="BodyLargeFontSize" />
			<StaticResource x:Key="OutlinedTextBoxCharacterSpacing" ResourceKey="BodyLargeCharacterSpacing" />

			<StaticResource x:Key="FilledTextBoxFontFamily" ResourceKey="BodyLargeFontFamily" />
			<StaticResource x:Key="FilledTextBoxFontWeight" ResourceKey="BodyLargeFontWeight" />
			<StaticResource x:Key="FilledTextBoxFontSize" ResourceKey="BodyLargeFontSize" />
			<StaticResource x:Key="FilledTextBoxCharacterSpacing" ResourceKey="BodyLargeCharacterSpacing" />
			<StaticResource x:Key="FilledTextBoxBorderThicknessNormal" ResourceKey="TextBoxOutlinedStrokeHeight" />
			<StaticResource x:Key="FilledTextBoxBorderThicknessFocused" ResourceKey="TextBoxFocusStrokeWidth" />
			<!--#endregion-->

			<!--#region Delete Button Style-->
			<x:Double x:Key="TextBoxClearGlyphWidth">20</x:Double>
			<x:Double x:Key="TextBoxClearGlyphHeight">20</x:Double>
			<!--#endregion-->

			<!--#region Filled TextBox Style-->
			<CornerRadius x:Key="FilledTextBoxCornerRadius">4,4,0,0</CornerRadius>
			<macos:Thickness x:Key="FilledTextBoxPadding">16,7</macos:Thickness>
			<not_macos:Thickness x:Key="FilledTextBoxPadding">16,8</not_macos:Thickness>
			<x:Double x:Key="FilledTextBoxMinHeight">58</x:Double>
			<x:Double x:Key="FilledTextBoxBorderHeightFocused">2</x:Double>
			<!--#endregion-->

			<!--#region Outlined TextBox Style-->
			<x:Double x:Key="OutlinedTextBoxBorderThickness">1</x:Double>
			<CornerRadius x:Key="OutlinedTextBoxCornerRadius">4</CornerRadius>
			<Thickness x:Key="OutlinedTextBoxPadding">8</Thickness>
			<x:Double x:Key="OutlinedTextBoxMinHeight">56</x:Double>
			<x:Double x:Key="OutlinedTextBoxBorderThicknessFocused">2</x:Double>
			<x:Double x:Key="OutlinedTextBoxBorderThicknessPointerOver">2</x:Double>
			<!--#endregion-->
		</ResourceDictionary>

		<ResourceDictionary x:Key="Light">
			<!--#region Fille Delete Button Brushes-->
			<StaticResource x:Key="TextBoxDeleteButtonForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxDeleteButtonForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxDeleteButtonForegroundPressed" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxDeleteButtonForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Leading Icon Brushes-->
			<StaticResource x:Key="TextBoxLeadingIconForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="TextBoxLeadingIconForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Filled TextBox Brushes-->
			<StaticResource x:Key="FilledTextBoxBackground" ResourceKey="SurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxBackgroundPointerOver" ResourceKey="OnSurfaceVariantHoverBrush" />
			<StaticResource x:Key="FilledTextBoxBackgroundFocused" ResourceKey="SurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxBackgroundDisabled" ResourceKey="OnSurfaceDisabledBrush" />

			<StaticResource x:Key="FilledTextBoxBorderBrush" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxBorderBrushPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxBorderBrushFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="FilledTextBoxBorderBrushDisabled" ResourceKey="OnSurfaceDisabledBrush" />

			<StaticResource x:Key="FilledTextBoxDeleteButtonForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxDeleteButtonForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxDeleteButtonForegroundFocused" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxDeleteButtonForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />

			<StaticResource x:Key="FilledTextBoxForeground" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<!-- In this case the opacity is not applied to the brush directly - known issue for ContentElement -->
			<StaticResource x:Key="FilledTextBoxForegroundDisabled" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxForegroundOpacityDisabled" ResourceKey="LowOpacity" />

			<StaticResource x:Key="FilledTextBoxPlaceholderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxPlaceholderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxPlaceholderForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="FilledTextBoxPlaceholderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />

			<StaticResource x:Key="FilledTextBoxHeaderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxHeaderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="FilledTextBoxHeaderForegroundFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="FilledTextBoxHeaderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Outlined TextBox Brushes-->
			<StaticResource x:Key="OutlinedTextBoxBorderBrush" ResourceKey="OutlineBrush" />
			<StaticResource x:Key="OutlinedTextBoxBorderBrushPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxBorderBrushFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="OutlinedTextBoxBorderBrushDisabled" ResourceKey="OnSurfaceDisabledBrush" />

			<StaticResource x:Key="OutlinedTextBoxForeground" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<!-- In this case the opacity is not applied to the brush directly - known issue for ContentElement -->
			<StaticResource x:Key="OutlinedTextBoxForegroundDisabled" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxForegroundOpacityDisabled" ResourceKey="LowOpacity" />

			<StaticResource x:Key="OutlinedTextBoxPlaceholderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxPlaceholderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxPlaceholderForegroundFocused" ResourceKey="OnSurfaceBrush" />
			<StaticResource x:Key="OutlinedTextBoxPlaceholderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />

			<StaticResource x:Key="OutlinedTextBoxHeaderForeground" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxHeaderForegroundPointerOver" ResourceKey="OnSurfaceVariantBrush" />
			<StaticResource x:Key="OutlinedTextBoxHeaderForegroundFocused" ResourceKey="PrimaryBrush" />
			<StaticResource x:Key="OutlinedTextBoxHeaderForegroundDisabled" ResourceKey="OnSurfaceLowBrush" />
			<!--#endregion-->

			<!--#region Typo-->
			<StaticResource x:Key="OutlinedTextBoxFontFamily" ResourceKey="BodyLargeFontFamily" />
			<StaticResource x:Key="OutlinedTextBoxFontWeight" ResourceKey="BodyLargeFontWeight" />
			<StaticResource x:Key="OutlinedTextBoxFontSize" ResourceKey="BodyLargeFontSize" />
			<StaticResource x:Key="OutlinedTextBoxCharacterSpacing" ResourceKey="BodyLargeCharacterSpacing" />

			<StaticResource x:Key="FilledTextBoxFontFamily" ResourceKey="BodyLargeFontFamily" />
			<StaticResource x:Key="FilledTextBoxFontWeight" ResourceKey="BodyLargeFontWeight" />
			<StaticResource x:Key="FilledTextBoxFontSize" ResourceKey="BodyLargeFontSize" />
			<StaticResource x:Key="FilledTextBoxCharacterSpacing" ResourceKey="BodyLargeCharacterSpacing" />
			<StaticResource x:Key="FilledTextBoxBorderThicknessNormal" ResourceKey="TextBoxOutlinedStrokeHeight" />
			<StaticResource x:Key="FilledTextBoxBorderThicknessFocused" ResourceKey="TextBoxFocusStrokeWidth" />
			<!--#endregion-->

			<!--#region Delete Button Style-->
			<x:Double x:Key="TextBoxClearGlyphWidth">20</x:Double>
			<x:Double x:Key="TextBoxClearGlyphHeight">20</x:Double>
			<!--#endregion-->

			<!--#region Filled TextBox Style-->
			<CornerRadius x:Key="FilledTextBoxCornerRadius">4,4,0,0</CornerRadius>
			<macos:Thickness x:Key="FilledTextBoxPadding">16,7</macos:Thickness>
			<not_macos:Thickness x:Key="FilledTextBoxPadding">16,8</not_macos:Thickness>
			<x:Double x:Key="FilledTextBoxMinHeight">58</x:Double>
			<x:Double x:Key="FilledTextBoxBorderHeightFocused">2</x:Double>
			<!--#endregion-->

			<!--#region Outlined TextBox Style-->
			<x:Double x:Key="OutlinedTextBoxBorderThickness">1</x:Double>
			<CornerRadius x:Key="OutlinedTextBoxCornerRadius">4</CornerRadius>
			<Thickness x:Key="OutlinedTextBoxPadding">8</Thickness>
			<x:Double x:Key="OutlinedTextBoxMinHeight">56</x:Double>
			<x:Double x:Key="OutlinedTextBoxBorderThicknessFocused">2</x:Double>
			<x:Double x:Key="OutlinedTextBoxBorderThicknessPointerOver">2</x:Double>
			<!--#endregion-->
		</ResourceDictionary>
	</ResourceDictionary.ThemeDictionaries>

	<!-- Converters -->
	<um:FromTextBoxEmptyStringToValueConverter x:Key="PlaceholderContentCompositeTransformTranslateY"
											   HeaderAndPlaceholderValue="8"
											   HeaderOnlyValue="0"
											   HeaderOnlyWithTextValue="8"
											   PlaceholderOnlyValue="0"
											   NoHeaderAndNoPlaceholderValue="0" />

	<um:FromTextBoxEmptyStringToValueConverter x:Key="FocusedPlaceholderContentCompositeTransformTranslateY"
											   HeaderAndPlaceholderValue="8"
											   HeaderOnlyValue="8"
											   HeaderOnlyWithTextValue="8"
											   PlaceholderOnlyValue="0"
											   NoHeaderAndNoPlaceholderValue="0" />

	<um:FromTextBoxEmptyStringToValueConverter x:Key="HeaderCompositeTransformTranslateY"
											   HeaderAndPlaceholderValue="-11"
											   HeaderOnlyValue="0"
											   HeaderOnlyWithTextValue="-11"
											   PlaceholderOnlyValue="0"
											   NoHeaderAndNoPlaceholderValue="0" />

	<um:FromTextBoxEmptyStringToValueConverter x:Key="HeaderCompositeTransformScales"
											   HeaderAndPlaceholderValue="0.7"
											   HeaderOnlyValue="1"
											   HeaderOnlyWithTextValue="0.7"
											   PlaceholderOnlyValue="1"
											   NoHeaderAndNoPlaceholderValue="1" />

	<!-- Path Data -->
	<x:String x:Key="TextBoxClearGlyphData">M14.9482 6.46442L13.534 5.05021L9.99849 8.58574L6.46296 5.05021L5.04874 6.46442L8.58428 9.99995L5.04874 13.5355L6.46296 14.9497L9.99849 11.4142L13.534 14.9497L14.9482 13.5355L11.4127 9.99995L14.9482 6.46442ZM17.0696 2.92889C13.1663 -0.974342 6.83065 -0.974342 2.92742 2.92889C-0.975807 6.83212 -0.975807 13.1678 2.92742 17.071C6.83065 20.9743 13.1663 20.9743 17.0696 17.071C20.9728 13.1678 20.9728 6.83212 17.0696 2.92889ZM4.34164 15.6568C1.22329 12.5385 1.22329 7.46144 4.34164 4.3431C7.45998 1.22476 12.537 1.22476 15.6553 4.3431C18.7737 7.46144 18.7737 12.5385 15.6553 15.6568C12.537 18.7752 7.45998 18.7752 4.34164 15.6568Z</x:String>


	<Style x:Key="MaterialDeleteButtonStyle"
		   TargetType="Button">
		<Setter Property="Foreground" Value="{ThemeResource TextBoxDeleteButtonForeground}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid x:Name="ButtonLayoutGrid"
						  Background="Transparent">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="GlyphElement.Fill" Value="{ThemeResource TextBoxDeleteButtonForegroundPointerOver}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="GlyphElement.Fill" Value="{ThemeResource TextBoxDeleteButtonForegroundPressed}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="GlyphElement.Fill" Value="{ThemeResource TextBoxDeleteButtonForegroundDisabled}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Path x:Name="GlyphElement"
							  Data="{ThemeResource TextBoxClearGlyphData}"
							  Fill="{TemplateBinding Foreground}"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center"
							  Stretch="Uniform"
							  Width="{ThemeResource TextBoxClearGlyphWidth}"
							  Height="{ThemeResource TextBoxClearGlyphHeight}"
							  AutomationProperties.AccessibilityView="Raw" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialFilledTextBoxStyle"
		   TargetType="TextBox">
		<Setter Property="Foreground" Value="{ThemeResource FilledTextBoxForeground}" />
		<Setter Property="PlaceholderForeground" Value="{ThemeResource FilledTextBoxPlaceholderForeground}" />
		<Setter Property="Background" Value="{ThemeResource FilledTextBoxBackground}" />
		<Setter Property="BorderBrush" Value="{ThemeResource FilledTextBoxBorderBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="CornerRadius" Value="{ThemeResource FilledTextBoxCornerRadius}" />

		<!-- Start: Body Large Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource FilledTextBoxFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource FilledTextBoxFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource FilledTextBoxFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource FilledTextBoxCharacterSpacing}" />
		<!-- End: Body Large Typo -->

		<macos:Setter Property="Padding"
					  Value="{ThemeResource FilledTextBoxPadding}" />
		<not_macos:Setter Property="Padding"
						  Value="{ThemeResource FilledTextBoxPadding}" />

		<Setter Property="MinHeight" Value="{ThemeResource FilledTextBoxMinHeight}" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="ut:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Grid x:Name="Root"
						  Background="{TemplateBinding Background}"
						  CornerRadius="{TemplateBinding CornerRadius}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />

								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="NormalBorder.Fill" Value="{ThemeResource FilledTextBoxBorderBrushPointerOver}" />
										<Setter Target="Root.Background" Value="{ThemeResource FilledTextBoxBackgroundPointerOver}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource FilledTextBoxPlaceholderForegroundPointerOver}" />
										<Setter Target="HeaderElement.Foreground" Value="{ThemeResource FilledTextBoxHeaderForegroundPointerOver}" />
										<Setter Target="ContentElement.Foreground" Value="{ThemeResource FilledTextBoxForegroundPointerOver}" />
										<Setter Target="DeleteButton.Foreground" Value="{ThemeResource FilledTextBoxDeleteButtonForegroundPointerOver}" />
										<Setter Target="NormalBorder.Height" Value="2" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Pressed" />

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="NormalBorder.Fill" Value="{ThemeResource FilledTextBoxBorderBrushDisabled}" />
										<!-- In this case the opacity is not applied to the brush directly - known issue for ContentElement -->
										<Setter Target="ContentElement.Foreground" Value="{ThemeResource FilledTextBoxForegroundDisabled}" />
										<Setter Target="ContentElement.Opacity" Value="{ThemeResource FilledTextBoxForegroundOpacityDisabled}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource FilledTextBoxPlaceholderForegroundDisabled}" />
										<Setter Target="HeaderElement.Foreground" Value="{ThemeResource FilledTextBoxHeaderForegroundDisabled}" />
										<Setter Target="Root.Background" Value="{ThemeResource FilledTextBoxBackgroundDisabled}" />
										<Setter Target="DeleteButton.Foreground" Value="{ThemeResource FilledTextBoxDeleteButtonForegroundDisabled}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource TextBoxLeadingIconForegroundDisabled}" />

									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource FilledTextBoxPlaceholderForegroundFocused}" />
										<Setter Target="HeaderElement.Foreground" Value="{ThemeResource FilledTextBoxHeaderForegroundFocused}" />
										<Setter Target="NormalBorder.Height" Value="{ThemeResource FilledTextBoxBorderHeightFocused}" />
										<Setter Target="NormalBorder.Fill" Value="{ThemeResource FilledTextBoxBorderBrushFocused}" />
										<Setter Target="Root.Background" Value="{ThemeResource FilledTextBoxBackgroundFocused}" />
										<Setter Target="ContentElement.Foreground" Value="{ThemeResource FilledTextBoxForegroundFocused}" />
										<Setter Target="DeleteButton.Foreground" Value="{ThemeResource FilledTextBoxDeleteButtonForegroundFocused}" />
									</VisualState.Setters>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="FocusedBorder_ScaleTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="1" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="DeleteButton.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>

							<!-- We need to use VisualStateGroups in order to capture when any of those properties are changed via code -->

							<!-- HeaderStates -->
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="HeaderNotEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FocusedPlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Header, Converter={StaticResource EmptyToFalseConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="HeaderEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Header, Converter={StaticResource EmptyToTrueConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>

							<!-- PlaceholderStates -->
							<VisualStateGroup x:Name="PlaceholderStates">
								<VisualState x:Name="PlaceholderNotEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding PlaceholderText, Converter={StaticResource EmptyToFalseConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="PlaceholderEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding PlaceholderText, Converter={StaticResource EmptyToTrueConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>

							<!-- TextStates -->
							<VisualStateGroup x:Name="TextStates">
								<VisualState x:Name="TextNotEmpty">
									<VisualState.Setters>
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FocusedPlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FocusedPlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
									</VisualState.Setters>

									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="HeaderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="-11" />
										<DoubleAnimation Storyboard.TargetName="HeaderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
										<DoubleAnimation Storyboard.TargetName="HeaderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
									</Storyboard>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource EmptyToFalseConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="TextEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource EmptyToTrueConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>

						</VisualStateManager.VisualStateGroups>

						<Grid Padding="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<!-- Container in place to properly vertically center the icon inside when it's a one-line TextBox -->
							<!-- but keep it in the same place and at the top when it's a multiline TextBox -->
							<Viewbox Grid.Column="0"
									 VerticalAlignment="Top"
									 Margin="0,9,10,0"
									 Width="{Binding Path=(ut:ControlExtensions.IconWidth), RelativeSource={RelativeSource TemplatedParent}}"
									 Height="{Binding Path=(ut:ControlExtensions.IconHeight), RelativeSource={RelativeSource TemplatedParent}}"
									 Visibility="{Binding Path=(ut:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
								<ContentPresenter x:Name="IconPresenter"
												  Content="{Binding Path=(ut:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  HorizontalAlignment="Center"
												  MaxWidth="30"
												  MinWidth="30"
												  Foreground="{ThemeResource TextBoxLeadingIconForeground}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Viewbox>

							<Grid Grid.Column="1">
								<Border MinHeight="38"
										VerticalAlignment="Top"
										Padding="0,10,0,8">
									<!-- Padding and VerticalAlignement="Top" are here to make sure the ScrollViewer does not move when entering a second line when multiline is enabled -->
									<ScrollViewer x:Name="ContentElement"
												  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
												  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
												  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
												  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
												  IsTabStop="False"
												  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
												  VerticalAlignment="Top"
												  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
												  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
												  ZoomMode="Disabled"
												  AutomationProperties.AccessibilityView="Raw">
										<ScrollViewer.RenderTransform>
											<CompositeTransform x:Name="ContentElement_CompositeTransform" />
										</ScrollViewer.RenderTransform>
									</ScrollViewer>
								</Border>

								<Border Height="38"
										VerticalAlignment="Top">
									<TextBlock x:Name="PlaceholderElement"
											   Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}"
											   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											   IsHitTestVisible="False"
											   RenderTransformOrigin="0,0.5"
											   Visibility="{Binding Text, Converter={StaticResource EmptyToVisibleConverter}, RelativeSource={RelativeSource TemplatedParent}}"
											   Text="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}}"
											   TextAlignment="{TemplateBinding TextAlignment}"
											   TextWrapping="{TemplateBinding TextWrapping}"
											   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
										<TextBlock.RenderTransform>
											<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
										</TextBlock.RenderTransform>
									</TextBlock>
								</Border>
								<Border Height="38"
										VerticalAlignment="Top">
									<TextBlock x:Name="HeaderElement"
											   Foreground="{ThemeResource FilledTextBoxHeaderForeground}"
											   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											   IsHitTestVisible="False"
											   RenderTransformOrigin="0,0.5"
											   Text="{TemplateBinding Header}"
											   TextAlignment="{TemplateBinding TextAlignment}"
											   TextWrapping="{TemplateBinding TextWrapping}"
											   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
										<TextBlock.RenderTransform>
											<CompositeTransform x:Name="HeaderElement_CompositeTransform" />
										</TextBlock.RenderTransform>
									</TextBlock>
								</Border>
							</Grid>

							<Button x:Name="DeleteButton"
									Grid.Column="2"
									Margin="8,0,0,0"
									Foreground="{ThemeResource FilledTextBoxDeleteButtonForeground}"
									IsTabStop="False"
									Style="{StaticResource MaterialDeleteButtonStyle}"
									VerticalAlignment="Stretch"
									Visibility="Collapsed"
									AutomationProperties.AccessibilityView="Raw" />
						</Grid>

						<Rectangle x:Name="NormalBorder"
								   Fill="{TemplateBinding BorderBrush}"
								   Height="{ThemeResource FilledTextBoxBorderThicknessNormal}"
								   VerticalAlignment="Bottom" />

						<Rectangle x:Name="FocusedBorder"
								   Fill="{ThemeResource FilledTextBoxBorderBrushFocused}"
								   Height="{ThemeResource FilledTextBoxBorderThicknessFocused}"
								   VerticalAlignment="Bottom"
								   not_macos:RenderTransformOrigin="0.5,0.5"
								   macos:RenderTransformOrigin="0.0,0.5">
							<Rectangle.RenderTransform>
								<ScaleTransform x:Name="FocusedBorder_ScaleTransform" ScaleX="0" />
							</Rectangle.RenderTransform>
						</Rectangle>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="MaterialOutlinedTextBoxStyle"
		   TargetType="TextBox">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Foreground" Value="{ThemeResource OutlinedTextBoxForeground}" />
		<Setter Property="PlaceholderForeground" Value="{ThemeResource OutlinedTextBoxPlaceholderForeground}" />
		<Setter Property="BorderBrush" Value="{ThemeResource OutlinedTextBoxBorderBrush}" />
		<Setter Property="BorderThickness" Value="{ThemeResource OutlinedTextBoxBorderThickness}" />
		<Setter Property="CornerRadius" Value="{ThemeResource OutlinedTextBoxCornerRadius}" />

		<!-- Start: Body Large Typo -->
		<Setter Property="FontFamily" Value="{ThemeResource OutlinedTextBoxFontFamily}" />
		<Setter Property="FontWeight" Value="{ThemeResource OutlinedTextBoxFontWeight}" />
		<Setter Property="FontSize" Value="{ThemeResource OutlinedTextBoxFontSize}" />
		<Setter Property="CharacterSpacing" Value="{ThemeResource OutlinedTextBoxCharacterSpacing}" />
		<!-- End: Body Large Typo -->

		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="Padding" Value="{ThemeResource OutlinedTextBoxPadding}" />
		<Setter Property="MinHeight" Value="{ThemeResource OutlinedTextBoxMinHeight}" />

		<!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
		<Setter Property="ut:ControlExtensions.Icon" Value="{x:Null}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Grid>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ContentElement.Foreground" Value="{ThemeResource OutlinedTextBoxForegroundPointerOver}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OutlinedTextBoxPlaceholderForegroundPointerOver}" />
										<Setter Target="HeaderElement.Foreground" Value="{ThemeResource OutlinedTextBoxHeaderForegroundPointerOver}" />
										<Setter Target="BorderBorder.BorderBrush" Value="{ThemeResource OutlinedTextBoxBorderBrushPointerOver}" />
										<Setter Target="BorderBorder.BorderThickness" Value="{ThemeResource OutlinedTextBoxBorderThicknessPointerOver}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<!-- In this case the opacity is not applied to the brush directly - known issue for ContentElement -->
										<Setter Target="ContentElement.Foreground" Value="{ThemeResource OutlinedTextBoxForegroundDisabled}" />
										<Setter Target="ContentElement.Opacity" Value="{ThemeResource OutlinedTextBoxForegroundOpacityDisabled}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OutlinedTextBoxPlaceholderForegroundDisabled}" />
										<Setter Target="HeaderElement.Foreground" Value="{ThemeResource OutlinedTextBoxHeaderForegroundDisabled}" />
										<Setter Target="IconPresenter.Foreground" Value="{ThemeResource TextBoxLeadingIconForegroundDisabled}" />
										<Setter Target="BorderBorder.BorderBrush" Value="{ThemeResource OutlinedTextBoxBorderBrushDisabled}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="ContentElement.Foreground" Value="{ThemeResource OutlinedTextBoxForegroundFocused}" />
										<Setter Target="PlaceholderElement.Foreground" Value="{ThemeResource OutlinedTextBoxPlaceholderForegroundFocused}" />
										<Setter Target="HeaderElement.Foreground" Value="{ThemeResource OutlinedTextBoxHeaderForegroundFocused}" />
										<Setter Target="BorderBorder.BorderBrush" Value="{ThemeResource OutlinedTextBoxBorderBrushFocused}" />
										<Setter Target="BorderBorder.BorderThickness" Value="{ThemeResource OutlinedTextBoxBorderThicknessFocused}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="DeleteButton.Visibility" Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>

							<!-- We need to use VisualStateGroups in order to capture when any of those properties are changed via code -->

							<!-- HeaderStates -->
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="HeaderNotEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FocusedPlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Header, Converter={StaticResource EmptyToFalseConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="HeaderEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Header, Converter={StaticResource EmptyToTrueConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>

							<!-- PlaceholderStates -->
							<VisualStateGroup x:Name="PlaceholderStates">
								<VisualState x:Name="PlaceholderNotEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding PlaceholderText, Converter={StaticResource EmptyToFalseConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="PlaceholderEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding PlaceholderText, Converter={StaticResource EmptyToTrueConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>

							<!-- TextStates -->
							<VisualStateGroup x:Name="TextStates">
								<VisualState x:Name="TextNotEmpty">
									<VisualState.Setters>
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FocusedPlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FocusedPlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
									</VisualState.Setters>

									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="HeaderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="-11" />
										<DoubleAnimation Storyboard.TargetName="HeaderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
										<DoubleAnimation Storyboard.TargetName="HeaderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="{StaticResource MaterialTextBoxAnimationDuration}"
														 EasingFunction="{StaticResource MaterialEaseInOutFunction}"
														 To="0.7" />
									</Storyboard>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource EmptyToFalseConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="TextEmpty">
									<VisualState.Setters>
										<Setter Target="HeaderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="ContentElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="PlaceholderElement_CompositeTransform.TranslateY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PlaceholderContentCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleX" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
										<Setter Target="HeaderElement_CompositeTransform.ScaleY" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HeaderCompositeTransformScales}, TargetNullValue=1, FallbackValue=1}" />
									</VisualState.Setters>
									<VisualState.StateTriggers>
										<StateTrigger IsActive="{Binding Text, Converter={StaticResource EmptyToTrueConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
									</VisualState.StateTriggers>
								</VisualState>
							</VisualStateGroup>

						</VisualStateManager.VisualStateGroups>

						<Grid CornerRadius="{TemplateBinding CornerRadius}"
							  Background="{TemplateBinding Background}"
							  Padding="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<!-- 0: Icon -->
							<Viewbox Grid.Column="0"
									 VerticalAlignment="Top"
									 Margin="14,9,4,0"
									 Width="{Binding Path=(ut:ControlExtensions.IconWidth), RelativeSource={RelativeSource TemplatedParent}}"
									 Height="{Binding Path=(ut:ControlExtensions.IconHeight), RelativeSource={RelativeSource TemplatedParent}}"
									 Visibility="{Binding Path=(ut:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
								<ContentPresenter x:Name="IconPresenter"
												  HorizontalAlignment="Center"
												  VerticalAlignment="Center"
												  MaxWidth="30"
												  MinWidth="30"
												  Content="{Binding Path=(ut:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}"
												  Foreground="{ThemeResource TextBoxLeadingIconForeground}" />
							</Viewbox>

							<!-- 1: Text Elements Container -->
							<Grid Grid.Column="1" Margin="8,0">
								<!--
									We need to center this in both Singleline and Multiline mode:
									- SingleLine via Border.MinHeight + SV.HAlign
									- Multiline via Border.Padding
									The reason we are using an uneven Border.Padding is because the actual platform-specific text input element
									have different heights on each platform (win=21, skia=20). The 10-top guarantee that the 1st line
									in multiline mode remains the same as in singleline. The 8-bottom leaves room for growth if needed,
									so we don't grow past the MaterialOutlinedTextBoxMinHeight of 56.
								-->
								<Border MinHeight="40"
										VerticalAlignment="Top"
										Padding="0,10,0,8">
									<ScrollViewer x:Name="ContentElement"
												  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
												  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
												  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
												  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
												  IsTabStop="False"
												  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
												  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
												  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
												  VerticalAlignment="Center"
												  ZoomMode="Disabled"
												  AutomationProperties.AccessibilityView="Raw">
										<ScrollViewer.RenderTransform>
											<CompositeTransform x:Name="ContentElement_CompositeTransform" />
										</ScrollViewer.RenderTransform>
									</ScrollViewer>
								</Border>

								<Border Grid.Column="1"
										Height="40"
										VerticalAlignment="Top">
									<TextBlock x:Name="HeaderElement"
											   Text="{TemplateBinding Header}"
											   Foreground="{ThemeResource OutlinedTextBoxHeaderForeground}"
											   TextAlignment="{TemplateBinding TextAlignment}"
											   TextWrapping="{TemplateBinding TextWrapping}"
											   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											   RenderTransformOrigin="0,0.5"
											   IsHitTestVisible="False">
										<TextBlock.RenderTransform>
											<CompositeTransform x:Name="HeaderElement_CompositeTransform" />
										</TextBlock.RenderTransform>
									</TextBlock>
								</Border>

								<Border Grid.Column="1"
										Height="40"
										VerticalAlignment="Top">
									<TextBlock x:Name="PlaceholderElement"
											   Text="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}}"
											   Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}"
											   TextAlignment="{TemplateBinding TextAlignment}"
											   TextWrapping="{TemplateBinding TextWrapping}"
											   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											   IsHitTestVisible="False"
											   Visibility="{Binding Text, Converter={StaticResource EmptyToVisibleConverter}, RelativeSource={RelativeSource TemplatedParent}}">
										<TextBlock.RenderTransform>
											<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
										</TextBlock.RenderTransform>
									</TextBlock>
								</Border>
							</Grid>

							<!-- 2: DeleteButton -->
							<Button Grid.Column="2"
									x:Name="DeleteButton"
									Height="40"
									Width="40"
									VerticalAlignment="Top"
									AutomationProperties.AccessibilityView="Raw"
									IsTabStop="False"
									Visibility="Collapsed"
									Style="{StaticResource MaterialDeleteButtonStyle}" />
						</Grid>

						<!--
							In Figma design, border thickness doesn't push its inner content like on xaml.
							So we are putting the border as an overlay here. To keep the rest of the measurements/values identical to Figma.
						-->
						<Border x:Name="BorderBorder"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="{TemplateBinding CornerRadius}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialDefaultTextBoxStyle"
		   TargetType="TextBox"
		   BasedOn="{StaticResource MaterialOutlinedTextBoxStyle}" />
</ResourceDictionary>
