<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d not_win android ios not_ios wasm xamarin skia contract4NotPresent contract7NotPresent macos lottie_not_win" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:um="using:Uno.Material" xmlns:not_win="http://uno.ui/not_win" xmlns:android="http://uno.ui/android" xmlns:ios="http://uno.ui/ios" xmlns:not_ios="http://uno.ui/not_ios" xmlns:wasm="http://uno.ui/wasm" xmlns:xamarin="http://uno.ui/xamarin" xmlns:toolkit="using:Uno.UI.Toolkit" xmlns:controls="using:Microsoft.UI.Xaml.Controls" xmlns:media="using:Microsoft.UI.Xaml.Media" xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives" xmlns:skia="http://uno.ui/skia" xmlns:contract4Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:contract4NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,4)" xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:contract7NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:IsNotWinUI3="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsTypeNotPresent(Microsoft.UI.Xaml.FrameworkElement)" xmlns:not_android="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:not_macos="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:macos="http://uno.ui/macos" xmlns:lottie_win="using:Microsoft.Toolkit.Uwp.UI.Lottie" xmlns:lottie_not_win="using:Microsoft.Toolkit.Uwp.UI.Lottie" xmlns:not_mobile="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <ResourceDictionary.MergedDictionaries>
    <um:MaterialFonts />
    <um:MaterialColors />
  </ResourceDictionary.MergedDictionaries>
  <ResourceDictionary.ThemeDictionaries>
    <ResourceDictionary x:Key="Light">
      <Color x:Key="ButtonFabLowFabBackgroundColor">#9F9F9F</Color>
      <StaticResource x:Key="MaterialMUXNavigationViewDefaultPaneBackground" ResourceKey="SystemChromeMediumColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewExpandedPaneBackground" ResourceKey="SystemChromeMediumColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewTopPaneBackground" ResourceKey="SystemChromeMediumHighColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForeground" ResourceKey="SystemControlForegroundBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundChecked" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelected" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlForegroundAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForeground" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundSelected" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
    </ResourceDictionary>
    <ResourceDictionary x:Key="Default">
      <Color x:Key="ButtonFabLowFabBackgroundColor">#606060</Color>
      <StaticResource x:Key="MaterialMUXNavigationViewDefaultPaneBackground" ResourceKey="SystemChromeMediumColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewExpandedPaneBackground" ResourceKey="SystemChromeMediumColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewTopPaneBackground" ResourceKey="SystemChromeMediumHighColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForeground" ResourceKey="SystemControlForegroundBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundChecked" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelected" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlForegroundAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForeground" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundSelected" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
    </ResourceDictionary>
    <ResourceDictionary x:Key="HighContrast">
      <StaticResource x:Key="MaterialMUXNavigationViewDefaultPaneBackground" ResourceKey="SystemChromeMediumColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewExpandedPaneBackground" ResourceKey="SystemColorWindowColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewTopPaneBackground" ResourceKey="SystemChromeMediumHighColor" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackground" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelected" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForeground" ResourceKey="SystemControlForegroundBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundChecked" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelected" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewSelectionIndicatorForeground" ResourceKey="SystemColorHighlightTextColor" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForeground" ResourceKey="MaterialMUXNavigationViewItemForeground" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundSelected" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialMUXTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialMUXNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
    </ResourceDictionary>
  </ResourceDictionary.ThemeDictionaries>
  <!--origin: Styles\Controls\v1\Button.xaml-->
  <um:ToUpperConverter x:Key="ToUpperConverter" />
  <Thickness x:Key="MaterialButtonPadding">16,8</Thickness>
  <CornerRadius x:Key="MaterialButtonCornerRadius">4</CornerRadius>
  <x:Double x:Key="MaterialButtonFontSize">14</x:Double>
  <StaticResource x:Key="MaterialContainedButtonLowBackgroundBrush" ResourceKey="MaterialOnSurfaceLowBrush" />
  <StaticResource x:Key="MaterialContainedButtonLowForegroundBrush" ResourceKey="MaterialOnSurfaceLowBrush" />
  <StaticResource x:Key="MaterialOutlinedButtonLowBrush" ResourceKey="MaterialOnSurfaceLowBrush" />
  <StaticResource x:Key="MaterialTextButtonLowBrush" ResourceKey="MaterialOnSurfaceLowBrush" />
  <Style x:Key="MaterialContainedButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{ThemeResource MaterialButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialButtonCornerRadius}" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="89.286" />
    <Setter Property="FontSize" Value="{ThemeResource MaterialButtonFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Opacity" Value="{StaticResource MaterialHoverOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CommonStatesOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="{StaticResource MaterialPressedOpacity}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource MaterialContainedButtonLowBackgroundBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialContainedButtonLowForegroundBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="{StaticResource MaterialFocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="CommonStatesOverlay" Background="{TemplateBinding Foreground}" Opacity="0" />
            <Border x:Name="FocusedOverlay" Background="{TemplateBinding Foreground}" Opacity="0" />
            <um:Ripple x:Name="ContentPresenter" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
              <um:Ripple.Content>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,8,0" MaxHeight="34" MaxWidth="34" MinWidth="25" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                  <ContentPresenter Grid.Column="1" Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ToUpperConverter}}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialContainedSecondaryButtonStyle" BasedOn="{StaticResource MaterialContainedButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{ThemeResource MaterialOnSecondaryBrush}" />
    <Setter Property="Background" Value="{ThemeResource MaterialSecondaryBrush}" />
  </Style>
  <Style x:Key="MaterialOutlinedButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="{StaticResource MaterialButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialButtonCornerRadius}" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="89.286" />
    <Setter Property="FontSize" Value="{StaticResource MaterialButtonFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CommonStatesOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="{StaticResource MaterialHoverOpacity}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CommonStatesOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="{StaticResource MaterialPressedOpacity}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOutlinedButtonLowBrush}" />
                    <Setter Target="Root.BorderBrush" Value="{StaticResource MaterialOutlinedButtonLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="{StaticResource MaterialFocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="CommonStatesOverlay" Background="{TemplateBinding Foreground}" Opacity="0" />
            <Border x:Name="FocusedOverlay" Background="{TemplateBinding Foreground}" Opacity="0" />
            <um:Ripple x:Name="ContentPresenter" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
              <um:Ripple.Content>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,8,0" MaxHeight="34" MaxWidth="34" MinWidth="25" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                  <ContentPresenter Grid.Column="1" Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ToUpperConverter}}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedSecondaryButtonStyle" BasedOn="{StaticResource MaterialOutlinedButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialSecondaryBrush}" />
  </Style>
  <Style x:Key="MaterialTextButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{ThemeResource MaterialButtonPadding}" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="89.286" />
    <Setter Property="FontSize" Value="{ThemeResource MaterialButtonFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialButtonCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CommonStatesOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="{StaticResource MaterialHoverOpacity}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="CommonStatesOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="{StaticResource MaterialPressedOpacity}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialTextButtonLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="{StaticResource MaterialFocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="{StaticResource MaterialFocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="CommonStatesOverlay" Background="{TemplateBinding Foreground}" Opacity="0" />
            <Border x:Name="FocusedOverlay" Background="{TemplateBinding Foreground}" Opacity="0" />
            <um:Ripple x:Name="ContentPresenter" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
              <um:Ripple.Content>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,8,0" MaxHeight="34" MaxWidth="34" MinWidth="25" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                  <ContentPresenter Grid.Column="1" Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ToUpperConverter}}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialTextSecondaryButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialTextButtonStyle}">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
  </Style>
  <Style x:Key="MaterialButtonIconStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Ellipse for PointedOver State -->
            <Ellipse x:Name="HoverOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource MaterialPrimaryHoverBrush}" Opacity="0" />
            <!-- Ellipse for Pressed State -->
            <Ellipse x:Name="PressedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource MaterialPrimaryPressedBrush}" Opacity="0" />
            <!-- Ellipse for Focused State -->
            <Ellipse x:Name="FocusedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource MaterialPrimaryFocusedBrush}" Opacity="0" />
            <!-- Content -->
            <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SeeStyleFlyoutButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root">
            <not_win:VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter_NotWin.Visibility" Value="Visible" />
                    <Setter Target="HeaderText.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter_NotWin.Visibility" Value="Visible" />
                    <Setter Target="HeaderText.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </not_win:VisualStateManager.VisualStateGroups>
            <win:Button Content="See Style" FontSize="10" Style="{StaticResource MaterialTextButtonStyle}" Margin="12,0">
              <Button.Flyout>
                <Flyout>
                  <TextBlock Text="{TemplateBinding Content}" />
                </Flyout>
              </Button.Flyout>
            </win:Button>
            <!-- Known Issue - Windows solution does not work on other platforms, content of flyout remains empty -->
            <not_win:TextBlock x:Name="HeaderText" Text="See Style" Foreground="{StaticResource MaterialPrimaryBrush}" FontSize="10" FontWeight="{TemplateBinding FontWeight}" Margin="12,0" />
            <not_win:ContentPresenter x:Name="ContentPresenter_NotWin" Content="{TemplateBinding Content}" FontWeight="{TemplateBinding FontWeight}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\CalendarDatePicker.xaml-->
  <Style x:Key="DefaultMaterialCalendarDatePickerStyle" TargetType="CalendarDatePicker">
    <Setter Property="Foreground" Value="{ThemeResource CalendarDatePickerForeground}" />
    <Setter Property="Background" Value="{ThemeResource CalendarDatePickerBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource CalendarDatePickerBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource CalendarDatePickerBorderThemeThickness}" />
    <Setter Property="CalendarViewStyle" Value="{StaticResource MaterialCalendarViewStyle}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Height" Value="53" />
    <Setter Property="UseSystemFocusVisuals" Value="{ThemeResource IsApplicationFocusVisualKindReveal}" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarDatePicker">
          <Grid x:Name="Root" Height="{TemplateBinding Height}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerHeaderForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DateText" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerTextForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarGlyph" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerCalendarGlyphForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DateText" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerTextForegroundSelected}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="TopHeader" />
                <VisualState x:Name="LeftHeader">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.(Grid.Row)" Value="1" />
                    <Setter Target="HeaderContentPresenter.(Grid.Column)" Value="0" />
                    <Setter Target="HeaderContentPresenter.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="HeaderContentPresenter.Margin" Value="{StaticResource CalendarDatePickerLeftHeaderMargin}" />
                    <Setter Target="HeaderContentPresenter.MaxWidth" Value="{StaticResource CalendarDatePickerLeftHeaderMaxWidth}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <FlyoutBase.AttachedFlyout>
              <Flyout Placement="Bottom" ShouldConstrainToRootBounds="False">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="IsDefaultShadowEnabled" Value="True" />
                    <Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ContentPresenter Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{TemplateBinding CornerRadius}" />
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <CalendarView x:Name="CalendarView" Style="{TemplateBinding CalendarViewStyle}" MinDate="{TemplateBinding MinDate}" MaxDate="{TemplateBinding MaxDate}" IsTodayHighlighted="{TemplateBinding IsTodayHighlighted}" DisplayMode="{TemplateBinding DisplayMode}" FirstDayOfWeek="{TemplateBinding FirstDayOfWeek}" DayOfWeekFormat="{TemplateBinding DayOfWeekFormat}" IsOutOfScopeEnabled="{TemplateBinding IsOutOfScopeEnabled}" IsGroupLabelVisible="{TemplateBinding IsGroupLabelVisible}" CornerRadius="{ThemeResource OverlayCornerRadius}" />
              </Flyout>
            </FlyoutBase.AttachedFlyout>
            <Border x:Name="Background" Background="{StaticResource TextBoxFilledBackgroundColorBrush}" CornerRadius="4,4,0,0" Control.IsTemplateFocusTarget="True" MinHeight="53" />
            <!-- Border -->
            <Rectangle x:Name="BottomBorder" VerticalAlignment="Bottom" Fill="{StaticResource MaterialPrimaryBrush}" Height="2" />
            <Grid Margin="10,0,10,0" VerticalAlignment="Center">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <!-- Header -->
              <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Header}" Style="{StaticResource MaterialCaption}" Foreground="{StaticResource MaterialPrimaryBrush}" TextWrapping="Wrap" />
              <!-- DateText -->
              <TextBlock x:Name="DateText" Grid.Row="1" Style="{StaticResource MaterialBody2}" Text="{TemplateBinding PlaceholderText}" />
            </Grid>
            <Grid Visibility="Collapsed">
              <FontIcon x:Name="CalendarGlyph" />
              <ContentPresenter x:Name="DescriptionPresenter" />
              <ContentPresenter x:Name="HeaderContentPresenter" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialCalendarDatePickerStyle" TargetType="CalendarDatePicker" BasedOn="{StaticResource DefaultMaterialCalendarDatePickerStyle}" />
  <!--origin: Styles\Controls\v1\CalendarView.xaml-->
  <x:String x:Key="DownArrowPathData">M0,0L32,0 16,19.745z</x:String>
  <Style x:Key="DefaultMaterialCalendarViewStyle" TargetType="CalendarView">
    <Setter Property="FocusBorderBrush" Value="{ThemeResource MaterialPrimaryFocusedBrush}" />
    <Setter Property="SelectedHoverBorderBrush" Value="{ThemeResource MaterialPrimaryBrush}" />
    <Setter Property="SelectedPressedBorderBrush" Value="{ThemeResource MaterialPrimaryBrush}" />
    <Setter Property="SelectedBorderBrush" Value="{ThemeResource MaterialPrimaryBrush}" />
    <Setter Property="HoverBorderBrush" Value="{ThemeResource CalendarViewHoverBorderBrush}" />
    <Setter Property="PressedBorderBrush" Value="{ThemeResource MaterialPrimaryBrush}" />
    <Setter Property="CalendarItemBorderBrush" Value="{ThemeResource CalendarViewCalendarItemRevealBorderBrush}" />
    <Setter Property="TodayForeground" Value="{ThemeResource CalendarViewForeground}" />
    <Setter Property="BlackoutForeground" Value="{ThemeResource CalendarViewBlackoutForeground}" />
    <win:Setter Property="SelectedForeground" Value="{ThemeResource CalendarViewSelectedForeground}" />
    <not_win:Setter Property="SelectedForeground" Value="{ThemeResource MaterialOnPrimaryBrush}" />
    <Setter Property="PressedForeground" Value="{ThemeResource CalendarViewPressedForeground}" />
    <Setter Property="OutOfScopeForeground" Value="{ThemeResource CalendarViewOutOfScopeForeground}" />
    <Setter Property="CalendarItemForeground" Value="{ThemeResource CalendarViewCalendarItemForeground}" />
    <Setter Property="OutOfScopeBackground" Value="{ThemeResource CalendarViewOutOfScopeBackground}" />
    <Setter Property="CalendarItemBackground" Value="{ThemeResource CalendarViewCalendarItemRevealBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialOnPrimaryBrush}" />
    <Setter Property="Background" Value="{ThemeResource MaterialPrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource CalendarViewBorderBrush}" />
    <Setter Property="DayItemFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="DayItemFontSize" Value="14" />
    <Setter Property="FirstOfMonthLabelFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FirstOfMonthLabelFontSize" Value="0" />
    <Setter Property="MonthYearItemFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="MonthYearItemFontSize" Value="14" />
    <Setter Property="FirstOfYearDecadeLabelFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <not_win:Setter Property="CalendarItemBorderThickness" Value="0" />
    <not_win:Setter Property="BorderThickness" Value="0" />
    <win:Setter Property="CalendarItemBorderThickness" Value="2" />
    <win:Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <not_win:Setter Property="DayItemCornerRadius" Value="20" />
    <not_win:Setter Property="CalendarItemCornerRadius" Value="40" />
    <not_win:Setter Property="SelectedBackground" Value="{ThemeResource MaterialPrimaryBrush}" />
    <not_win:Setter Property="TodaySelectedBackground" Value="{ThemeResource MaterialPrimaryBrush}" />
    <not_win:Setter Property="TodayBackground" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarView">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <Border.Resources>
              <Style x:Key="WeekDayNameStyle" BasedOn="{StaticResource CaptionTextBlockStyle}" TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
              </Style>
              <Style x:Key="NavigationButtonStyle" TargetType="Button">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
                <Setter Property="FontSize" Value="14" />
                <Setter Property="Background" Value="{ThemeResource CalendarViewNavigationButtonBackground}" />
                <Setter Property="BackgroundSizing" Value="OuterBorderEdge" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <ContentPresenter x:Name="Text" Margin="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Background="{TemplateBinding Background}" BackgroundSizing="{TemplateBinding BackgroundSizing}" BorderBrush="{ThemeResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="Text.BorderBrush" Value="{ThemeResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                                <Setter Target="Text.Foreground" Value="{ThemeResource MaterialOnPrimaryMediumBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="Text.Foreground" Value="{ThemeResource MaterialOnPrimaryLowBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled" />
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                      </ContentPresenter>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style TargetType="Button" x:Key="HeaderButtonStyle" BasedOn="{StaticResource NavigationButtonStyle}">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="4" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Text" Background="{TemplateBinding Background}" BackgroundSizing="{TemplateBinding BackgroundSizing}" BorderBrush="{ThemeResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                        <Path x:Name="DownArrowGlyph" Data="{StaticResource DownArrowPathData}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Height="5" Width="10" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="2" />
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="Text.BorderBrush" Value="{ThemeResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                                <Setter Target="Text.Foreground" Value="{StaticResource MaterialOnPrimaryMediumBrush}" />
                                <Setter Target="DownArrowGlyph.Fill" Value="{StaticResource MaterialOnPrimaryMediumBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="Text.Foreground" Value="{StaticResource MaterialOnPrimaryLowBrush}" />
                                <Setter Target="DownArrowGlyph.Fill" Value="{StaticResource MaterialOnPrimaryLowBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <VisualState.Setters>
                                <Setter Target="DownArrowGlyph.Opacity" Value="0" />
                              </VisualState.Setters>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style x:Key="ScrollViewerStyle" TargetType="ScrollViewer">
                <Setter Property="HorizontalScrollMode" Value="Disabled" />
                <Setter Property="VerticalScrollMode" Value="Enabled" />
                <Setter Property="VerticalSnapPointsType" Value="Optional" />
                <Setter Property="ZoomMode" Value="Disabled" />
                <Setter Property="TabNavigation" Value="Once" />
                <Setter Property="BringIntoViewOnFocusChange" Value="False" />
                <Setter Property="Template" Value="{StaticResource ScrollViewerScrollBarlessTemplate}" />
                <not_win:Setter Property="(uno:ScrollViewer.ShouldFallBackToNativeScrollBars)" Value="False" />
              </Style>
            </Border.Resources>
            <Grid MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.MinViewWidth}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Grid.RowDefinitions>
                <RowDefinition Height="40" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="5*" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Button x:Name="HeaderButton" Padding="12,0,0,0" HorizontalContentAlignment="Left" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HeaderText}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreViews}" Style="{StaticResource HeaderButtonStyle}" />
                <Button x:Name="PreviousButton" Grid.Column="1" Padding="1" HorizontalContentAlignment="Center" Content="&#xE76B;" FontFamily="{ThemeResource SymbolThemeFontFamily}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreContentBefore}" IsTabStop="True" Style="{StaticResource NavigationButtonStyle}" />
                <Button x:Name="NextButton" Grid.Column="2" Padding="1" HorizontalContentAlignment="Center" Content="&#xE76C;" FontFamily="{ThemeResource SymbolThemeFontFamily}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreContentAfter}" IsTabStop="True" Style="{StaticResource NavigationButtonStyle}" />
              </Grid>
              <Grid x:Name="Views" Grid.Row="1">
                <!--<Grid.Clip>
                                    <RectangleGeometry Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ClipRect}" />
                                </Grid.Clip>-->
                <Border x:Name="BackgroundLayer" Background="{TemplateBinding BorderBrush}">
                  <Border.RenderTransform>
                    <ScaleTransform x:Name="BackgroundTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </Border.RenderTransform>
                </Border>
                <Grid x:Name="MonthView">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="38" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <Grid.RenderTransform>
                    <ScaleTransform x:Name="MonthViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </Grid.RenderTransform>
                  <Grid x:Name="WeekDayNames" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBlock x:Name="WeekDay1" Style="{StaticResource WeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay1}" />
                    <TextBlock x:Name="WeekDay2" Grid.Column="1" Style="{StaticResource WeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay2}" />
                    <TextBlock x:Name="WeekDay3" Grid.Column="2" Style="{StaticResource WeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay3}" />
                    <TextBlock x:Name="WeekDay4" Grid.Column="3" Style="{StaticResource WeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay4}" />
                    <TextBlock x:Name="WeekDay5" Grid.Column="4" Style="{StaticResource WeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay5}" />
                    <TextBlock x:Name="WeekDay6" Grid.Column="5" Style="{StaticResource WeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay6}" />
                    <TextBlock x:Name="WeekDay7" Grid.Column="6" Style="{StaticResource WeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay7}" />
                  </Grid>
                  <ScrollViewer x:Name="MonthViewScrollViewer" Grid.Row="1" IsFocusEngagementEnabled="True" Style="{StaticResource ScrollViewerStyle}">
                    <CalendarPanel x:Name="MonthViewPanel" />
                  </ScrollViewer>
                </Grid>
                <!-- Uno only: Opacity set to 0 to avoid flicker when changing display mode -->
                <ScrollViewer x:Name="YearViewScrollViewer" IsFocusEngagementEnabled="True" Opacity="0" Style="{StaticResource ScrollViewerStyle}" UseLayoutRounding="False" Visibility="Collapsed">
                  <ScrollViewer.RenderTransform>
                    <ScaleTransform x:Name="YearViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </ScrollViewer.RenderTransform>
                  <CalendarPanel x:Name="YearViewPanel" />
                </ScrollViewer>
                <!-- Uno only: Opacity set to 0 to avoid flicker when changing display mode -->
                <ScrollViewer x:Name="DecadeViewScrollViewer" IsFocusEngagementEnabled="True" Opacity="0" Style="{StaticResource ScrollViewerStyle}" UseLayoutRounding="False" Visibility="Collapsed">
                  <ScrollViewer.RenderTransform>
                    <ScaleTransform x:Name="DecadeViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </ScrollViewer.RenderTransform>
                  <CalendarPanel x:Name="DecadeViewPanel" />
                </ScrollViewer>
              </Grid>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay1" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay2" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay3" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay4" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay5" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay6" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay7" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderButtonStates">
                <VisualState x:Name="ViewChanged" />
                <VisualState x:Name="ViewChanging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HeaderButton" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.167" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualState x:Name="Month" />
                <VisualState x:Name="Year">
                  <!-- Begin: Uno only -->
                  <VisualState.Setters>
                    <Setter Target="YearViewScrollViewer.IsHitTestVisible" Value="True" />
                  </VisualState.Setters>
                  <!-- End: Uno only -->
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthViewScrollViewer" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <!-- Begin: Uno only - We changed the default value to avoid flicker, make sure to set it to 1 even if transitions are disabled -->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!-- End: Uno only -->
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Decade">
                  <!-- Begin: Uno only -->
                  <VisualState.Setters>
                    <Setter Target="DecadeViewScrollViewer.IsHitTestVisible" Value="True" />
                  </VisualState.Setters>
                  <!-- End: Uno only -->
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthViewScrollViewer" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <!-- Begin: Uno only - We changed the default value to avoid flicker, make sure to set it to 1 even if transitions are disabled -->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!-- End: Uno only -->
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Month" To="Year">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <!-- Uno only: Make sure to set visibility only AFTER opacity -->
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Month">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Decade">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <!-- Uno only: Make sure to set visibility only AFTER opacity -->
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Decade" To="Year">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialCalendarViewStyle" TargetType="CalendarView" BasedOn="{StaticResource DefaultMaterialCalendarViewStyle}" />
  <!--origin: Styles\Controls\v1\CheckBox.xaml-->
  <x:String x:Key="HyphenGlyphPathStyle">M0,0L32,0 32,5.3 0,5.3z</x:String>
  <x:String x:Key="CheckGlyphPathStyle">M30.561941,0L31.997,1.393004 10.467954,23.597999 0,15.350999 1.2379759,13.780992 10.287961,20.909952z</x:String>
  <GridLength x:Key="CheckAreaLength">40</GridLength>
  <x:Double x:Key="FocusAreaSize">40</x:Double>
  <x:Double x:Key="CheckAreaSize">18</x:Double>
  <CornerRadius x:Key="CheckAreaCornerRadius">4</CornerRadius>
  <StaticResource x:Key="MaterialCheckBoxBorderBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <Style x:Key="MaterialCheckBoxStyle" TargetType="CheckBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialCheckBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="Padding" Value="8,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="{StaticResource CheckAreaSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Grid x:Name="Root" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="Pressed">
                    <Storyboard>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="PointerOver" To="Pressed">
                    <Storyboard>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CombinedStates">
                <VisualState x:Name="UncheckedNormal" />
                <VisualState x:Name="UncheckedPointerOver" />
                <VisualState x:Name="UncheckedPressed" />
                <VisualState x:Name="UncheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedNormal">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <xamarin:VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </xamarin:VisualState.Setters>
                  <win:Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckedBackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </win:Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminateNormal">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminatePointerOver">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminatePressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <xamarin:VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </xamarin:VisualState.Setters>
                  <win:Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckedBackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="HyphenGlyph" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </win:Storyboard>
                </VisualState>
                <VisualState x:Name="IndeterminateDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="UncheckedNormal" To="UncheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="UncheckedPointerOver" To="UncheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="CheckedNormal" To="CheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="CheckedPointerOver" To="CheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminateNormal" To="IndeterminatePressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminatePointerOver" To="IndeterminatePressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusRing.Opacity" Value="{StaticResource MaterialFocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="{StaticResource CheckAreaLength}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Ellipse x:Name="FocusRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource FocusAreaSize}" Height="{StaticResource FocusAreaSize}" Fill="{TemplateBinding Background}" IsHitTestVisible="False" Opacity="0" />
            <Ellipse x:Name="PressRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource FocusAreaSize}" Height="{StaticResource FocusAreaSize}" Fill="{StaticResource MaterialOnSurfaceLowBrush}" IsHitTestVisible="False" Opacity="0" />
            <Grid x:Name="CheckBoxContainer" Height="{StaticResource CheckAreaSize}" Width="{StaticResource CheckAreaSize}">
              <Grid x:Name="BackgroundBorder" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" />
              <Grid x:Name="CheckedBackgroundBorder" Background="{TemplateBinding Background}" Opacity="0" CornerRadius="2" />
              <Path x:Name="HyphenGlyph" Data="{StaticResource HyphenGlyphPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="12" Height="4" Opacity="0" AutomationProperties.AccessibilityView="Raw" xamarin:Margin="0,2,0,0" />
              <Path x:Name="CheckGlyph" Data="{StaticResource CheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="12" Height="12" Opacity="0" AutomationProperties.AccessibilityView="Raw" xamarin:Margin="0,2,0,0" />
            </Grid>
            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{StaticResource MaterialOnBackgroundBrush}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="1" AutomationProperties.AccessibilityView="Raw" TextWrapping="Wrap" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource MaterialCheckBoxStyle}">
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\ComboBox.xaml-->
  <um:FromNullToValueConverter x:Key="NullToScaleConverter" NotNullValue="0.7" NullValue="1" />
  <um:FromNullToValueConverter x:Key="NullToPlaceholderTranslateYConverter" NotNullValue="-11" NullValue="0" />
  <um:FromNullToValueConverter x:Key="NullToContentTranslateYConverter" NotNullValue="5" NullValue="0" />
  <um:FromNullToValueConverter x:Key="NullToPlaceholderThemeBrushConverter" NotNullValue="{StaticResource ComboBoxPlaceholderFocusedThemeBrush}" NullValue="{StaticResource ComboBoxPlaceholderForegroundThemeBrush}" />
  <StaticResource x:Key="ComboBoxBackgroundColorBrush" ResourceKey="MaterialSurfaceBrush" />
  <StaticResource x:Key="ComboBoxSelectedBackgroundThemeBrush" ResourceKey="MaterialOnSurfaceHoverBrush" />
  <StaticResource x:Key="ComboBoxSelectedPointerOverBackgroundThemeBrush" ResourceKey="MaterialOnSurfaceHoverBrush" />
  <StaticResource x:Key="ComboBoxPressedHighlightThemeBrush" ResourceKey="MaterialOnSurfaceHoverBrush" />
  <StaticResource x:Key="ComboBoxPressedBackgroundThemeBrush" ResourceKey="MaterialOnSurfaceHoverBrush" />
  <StaticResource x:Key="ComboBoxBorderBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="ComboBoxFocusedBorderBrush" ResourceKey="MaterialOnBackgroundBrush" />
  <StaticResource x:Key="ComboBoxArrowForegroundThemeBrush" ResourceKey="MaterialOnBackgroundBrush" />
  <StaticResource x:Key="ComboBoxForegroundThemeBrush" ResourceKey="MaterialOnBackgroundBrush" />
  <StaticResource x:Key="ComboBoxPlaceholderFocusedThemeBrush" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="ComboBoxDisabledBackgroundBrush" ResourceKey="MaterialOnSurfaceFocusedBrush" />
  <SolidColorBrush x:Key="ComboBoxPlaceholderForegroundThemeBrush" Color="{ThemeResource MaterialOnBackgroundColor}" Opacity="0.74" />
  <CornerRadius x:Key="MaterialComboBoxCornerRadius">4</CornerRadius>
  <x:String x:Key="UpArrowPathData">M15.995972,0L32,21.478999 0,21.478999z</x:String>
  <Style x:Key="MaterialComboBoxItemStyle" TargetType="ComboBoxItem">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Height" Value="50" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBoxItem">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0.9">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0.75">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedPointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedDisabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SelectedPressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0.9">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Pressed Overlay -->
            <Grid x:Name="PressedOverlay" Background="{StaticResource ComboBoxSelectedBackgroundThemeBrush}" BorderBrush="{StaticResource ComboBoxBorderBrush}" BorderThickness="0,1,0,1" IsHitTestVisible="False" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Opacity="0" />
            <!-- ContentPresenter-->
            <ContentPresenter x:Name="ContentPresenter" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}">
              <ContentPresenter.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <TextBlock Text="{Binding}" Style="{StaticResource MaterialBody2}" VerticalAlignment="Center" Margin="16,0,0,0" />
                  </Grid>
                </DataTemplate>
              </ContentPresenter.ContentTemplate>
            </ContentPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialComboBoxStyle" TargetType="ComboBox">
    <Setter Property="Foreground" Value="{ThemeResource ComboBoxForegroundThemeBrush}" />
    <Setter Property="Background" Value="{ThemeResource ComboBoxBackgroundColorBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource ComboBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="MinHeight" Value="50" />
    <Setter Property="TabNavigation" Value="Once" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
    <Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="True" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.BringIntoViewOnFocusChange" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialComboBoxItemStyle}" />
    <xamarin:Setter Property="uno:ComboBox.DropDownPreferredPlacement" Value="Below" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <CarouselPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid x:Name="RootGrid" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource ComboBoxPointerOverBackgroundThemeBrush}" />
                    <Setter Target="Highlight.Background" Value="{ThemeResource ComboBoxSelectedPointerOverBackgroundThemeBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource ComboBoxPressedBackgroundThemeBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="DropDownGlyph_Down.Fill" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="ComboBoxContent.Background" Value="{StaticResource ComboBoxDisabledBackgroundBrush}" />
                    <Setter Target="ElevatedView.BorderThickness" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="HighlightBorder.Opacity" Value="1" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource TextBoxLabelFocusColorBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="FocusedPressed">
                  <VisualState.Setters>
                    <Setter Target="Highlight.Background" Value="{ThemeResource ComboBoxPressedHighlightThemeBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource ComboBoxPlaceholderForegroundThemeBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="FocusedDropDown">
                  <VisualState.Setters>
                    <Setter Target="PopupBorder.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DropDownStates">
                <VisualState x:Name="Opened">
                  <Storyboard>
                    <SplitOpenThemeAnimation ClosedTargetName="ContentPresenter" ContentTranslationOffset="0" ContentTargetName="ScrollViewer" ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}" OpenedTargetName="PopupBorder" OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Closed">
                  <Storyboard>
                    <SplitCloseThemeAnimation ClosedTargetName="ContentPresenter" ContentTranslationOffset="40" ContentTranslationDirection="{Binding TemplateSettings.SelectedItemDirection, RelativeSource={RelativeSource Mode=TemplatedParent}}" ContentTargetName="ScrollViewer" ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}" OpenedTargetName="PopupBorder" OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Elevated View -->
            <toolkit:ElevatedView x:Name="ElevatedView" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}" Elevation="8" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid x:Name="ComboBoxContent" Background="{TemplateBinding Background}" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="40" />
                </Grid.ColumnDefinitions>
                <!-- Pressed Background -->
                <Border x:Name="PressedBackground" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}" Background="{ThemeResource ComboBoxPressedHighlightThemeBrush}" Opacity="0" Grid.ColumnSpan="2" />
                <!-- Highlight Background -->
                <Border x:Name="HighlightBorder" BorderBrush="{StaticResource ComboBoxFocusedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}" Grid.ColumnSpan="2" />
                <!-- Highlight -->
                <Border x:Name="Highlight" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}" Background="{ThemeResource ComboBoxSelectedBackgroundThemeBrush}" Margin="{TemplateBinding BorderThickness}" Opacity="0" />
                <Grid Margin="16,0" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}">
                  <Grid.Resources>
                    <!-- Resources added here in order to manage the ContentPresenter TranslateY depending if there is a PlaceholderText or not -->
                    <CompositeTransform x:Key="ContentPresenter_CompositeTransformWithPlaceholder" TranslateY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToContentTranslateYConverter}, TargetNullValue=0, FallbackValue=0}" />
                    <CompositeTransform x:Key="ContentPresenter_CompositeTransformWithoutPlaceholder" TranslateY="0" />
                    <um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformConverter" NotNullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithPlaceholder}" NullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}" />
                  </Grid.Resources>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <!-- IconPresenter -->
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="34" MaxWidth="34" MinWidth="25" Margin="0,0,8,0" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                  <!-- ContentPresenter -->
                  <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" VerticalAlignment="Center" RenderTransform="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformConverter}, TargetNullValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}, FallbackValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}}" />
                  <!-- PlaceholderElement -->
                  <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Text="{TemplateBinding PlaceholderText}" Style="{StaticResource MaterialBody2}" Foreground="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToPlaceholderThemeBrushConverter}, TargetNullValue={StaticResource ComboBoxPlaceholderForegroundThemeBrush}, FallbackValue={StaticResource ComboBoxPlaceholderForegroundThemeBrush}}" VerticalAlignment="Center" RenderTransformOrigin="0,0.5" IsHitTestVisible="False" MaxLines="1">
                    <TextBlock.RenderTransform>
                      <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" ScaleX="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToScaleConverter}, TargetNullValue=1, FallbackValue=1}" ScaleY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToScaleConverter}, TargetNullValue=1, FallbackValue=1}" TranslateY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToPlaceholderTranslateYConverter}, TargetNullValue=0, FallbackValue=0}" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
                <!-- Down -->
                <Path x:Name="DropDownGlyph_Down" Data="{StaticResource DownArrowPathData}" Fill="{ThemeResource ComboBoxArrowForegroundThemeBrush}" Stretch="Uniform" Height="5" Width="10" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1" />
                <!-- Up -->
                <Path x:Name="DropDownGlyph_Up" Data="{StaticResource UpArrowPathData}" Fill="{ThemeResource ComboBoxArrowForegroundThemeBrush}" Stretch="Uniform" Height="5" Width="10" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" Grid.Column="1" />
                <!-- Popup -->
                <Popup x:Name="Popup">
                  <Border x:Name="PopupBorder">
                    <!-- Workaround for Issue #213 where android PopupBorder doesn't get redrawn properly, adds Background, CornerRadius and Border to ScrollViewer  -->
                    <ScrollViewer x:Name="ScrollViewer" Background="{TemplateBinding Background}" BorderBrush="{StaticResource ComboBoxBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}" AutomationProperties.AccessibilityView="Raw" BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" MinWidth="{ThemeResource ComboBoxPopupThemeMinWidth}" VerticalSnapPointsType="OptionalSingle" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalSnapPointsAlignment="Near" ZoomMode="Disabled">
                      <ItemsPresenter />
                    </ScrollViewer>
                  </Border>
                </Popup>
              </Grid>
            </toolkit:ElevatedView>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\CommandBar.xaml-->
  <x:Double x:Key="MaterialCommandBarElevation">4</x:Double>
  <x:Double x:Key="MaterialCommandBarHeight">48</x:Double>
  <Style x:Key="MaterialAppBarButton" TargetType="AppBarButton">
    <Setter Property="Height" Value="{StaticResource MaterialCommandBarHeight}" />
    <Setter Property="Width" Value="{StaticResource MaterialCommandBarHeight}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="IsCompact" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="AppBarButton">
          <um:Ripple Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}">
            <Viewbox x:Name="ContentViewbox" Height="{ThemeResource AppBarButtonContentHeight}" Width="{ThemeResource AppBarButtonContentHeight}" Margin="0,12" HorizontalAlignment="Stretch" AutomationProperties.AccessibilityView="Raw">
              <ContentPresenter x:Name="Content" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
            </Viewbox>
          </um:Ripple>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ios:ControlTemplate x:Key="NativeCommandBarTemplate" TargetType="CommandBar">
    <!-- We use BorderBrush instead of Background to ensure that semi-transparent background of Grid and NativeCommandBarPresenter don't add up -->
    <Border BorderBrush="{TemplateBinding Background}" BorderThickness="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
      <NativeCommandBarPresenter Height="44" />
    </Border>
  </ios:ControlTemplate>
  <android:ControlTemplate x:Key="NativeCommandBarTemplate" TargetType="CommandBar">
    <NativeCommandBarPresenter />
  </android:ControlTemplate>
  <ControlTemplate x:Key="XamlMaterialCommandBarTemplate" TargetType="CommandBar">
    <!-- Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows. -->
    <Grid x:Name="LayoutRoot" win:Height="48" Background="{TemplateBinding Background}">
      <Grid x:Name="ContentRoot" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <!-- note: NavigationCommand is an AppBarButton, not ICommand -->
        <ContentControl Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{TemplateBinding Foreground}" Height="{StaticResource MaterialCommandBarHeight}" Width="{StaticResource MaterialCommandBarHeight}" IsTabStop="False" />
        <!--
					Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
					in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
				-->
        <ContentControl x:Name="ContentControl" Grid.Column="1" Margin="16,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" />
        <ItemsControl x:Name="PrimaryItemsControl" HorizontalAlignment="Right" MinHeight="{ThemeResource AppBarThemeCompactHeight}" IsTabStop="False" Grid.Column="2">
          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <StackPanel Orientation="Horizontal" />
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>
        </ItemsControl>
      </Grid>
    </Grid>
  </ControlTemplate>
  <Style x:Key="BaseMaterialCommandBarStyle" TargetType="CommandBar">
    <!-- Setting content to empty to avoid getting the datacontext -->
    <Setter Property="Content" Value="" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding}" Style="{StaticResource MaterialHeadline5}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <android:Setter Property="(toolkit:UIElementExtensions.Elevation)" Value="{StaticResource MaterialCommandBarElevation}" />
    <Setter Property="Height" Value="{StaticResource MaterialCommandBarHeight}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="OverflowButtonVisibility" Value="Collapsed" />
    <Setter Property="IsDynamicOverflowEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource XamlMaterialCommandBarTemplate}" />
  </Style>
  <Style x:Key="MaterialCommandBarStyle" TargetType="CommandBar" BasedOn="{StaticResource BaseMaterialCommandBarStyle}">
    <ios:Setter Property="Height" Value="NaN" />
    <ios:Setter Property="Template" Value="{StaticResource NativeCommandBarTemplate}" />
    <android:Setter Property="Template" Value="{StaticResource NativeCommandBarTemplate}" />
  </Style>
  <!--origin: Styles\Controls\v1\DatePicker.xaml-->
  <x:Double x:Key="MaterialDateTimeFlyoutBorderThickness">1</x:Double>
  <x:Double x:Key="MaterialDatePickerSpacerThemeWidth">1</x:Double>
  <StaticResource x:Key="MaterialDatePickerFlyoutPresenterBackgroundBrush" ResourceKey="MaterialSurfaceBrush" />
  <Thickness x:Key="MaterialDatePickerHostPadding">24,24,8,8</Thickness>
  <StaticResource x:Key="MaterialDatePickerFlyoutPresenterBorderBrush" ResourceKey="MaterialOnSurfaceFocusedBrush" />
  <SolidColorBrush x:Key="MaterialDatePickerFlyoutPresenterHighlightFill" Opacity="0.20" Color="{ThemeResource MaterialPrimaryColor}" />
  <x:Double x:Key="MaterialDatePickerFlyoutElevation">8</x:Double>
  <StaticResource x:Key="MaterialDatePickerFlyoutPresenterSpacerFill" ResourceKey="MaterialOnSurfaceFocusedBrush" />
  <Style x:Key="DatePickerFlyoutButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}">
            <!-- Label -->
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <not_win:Style x:Key="MaterialDatePickerFlyoutPresenterStyle" TargetType="DatePickerFlyoutPresenter">
    <Setter Property="Width" Value="296" />
    <Setter Property="MinWidth" Value="296" />
    <Setter Property="MaxHeight" Value="398" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{StaticResource MaterialDatePickerFlyoutPresenterBackgroundBrush}" />
    <Setter Property="AutomationProperties.AutomationId" Value="DatePickerFlyoutPresenter" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialDateTimeFlyoutBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialDatePickerFlyoutPresenterBorderBrush}" />
    <Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePickerFlyoutPresenter">
          <toolkit:ElevatedView MaxHeight="398" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{StaticResource MaterialDatePickerFlyoutElevation}" ShadowColor="Black">
            <Border x:Name="Background">
              <Grid x:Name="ContentPanel">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid x:Name="PickerHostGrid">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="DayColumn" Width="78*" />
                    <ColumnDefinition x:Name="FirstSpacerColumn" Width="Auto" />
                    <ColumnDefinition x:Name="MonthColumn" Width="132*" />
                    <ColumnDefinition x:Name="SecondSpacerColumn" Width="Auto" />
                    <ColumnDefinition x:Name="YearColumn" Width="78*" />
                  </Grid.ColumnDefinitions>
                  <Rectangle x:Name="HighlightRect" Grid.Column="0" Grid.ColumnSpan="5" Height="{ThemeResource DatePickerFlyoutPresenterHighlightHeight}" VerticalAlignment="Center" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterHighlightFill}" />
                  <Rectangle x:Name="FirstPickerSpacing" Grid.Column="1" Width="{ThemeResource MaterialDatePickerSpacerThemeWidth}" HorizontalAlignment="Center" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterSpacerFill}" />
                  <Rectangle x:Name="SecondPickerSpacing" Grid.Column="3" Width="{ThemeResource MaterialDatePickerSpacerThemeWidth}" HorizontalAlignment="Center" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterSpacerFill}" />
                </Grid>
                <Grid x:Name="AcceptDismissHostGrid" Height="{ThemeResource DatePickerFlyoutPresenterAcceptDismissHostGridHeight}" VerticalAlignment="Bottom" Background="{TemplateBinding Background}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Rectangle Height="{ThemeResource MaterialDatePickerSpacerThemeWidth}" VerticalAlignment="Top" Grid.ColumnSpan="3" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterSpacerFill}" />
                  <Button x:Name="DismissButton" x:Uid="DatePickerFlyoutDismissButton" Grid.Column="1" HorizontalAlignment="Right" Content="CANCEL" Style="{StaticResource MaterialTextButtonStyle}" />
                  <Button x:Name="AcceptButton" x:Uid="DatePickerFlyoutAcceptButton" Grid.Column="2" HorizontalAlignment="Right" Content="OK" Style="{StaticResource MaterialTextButtonStyle}" />
                </Grid>
              </Grid>
            </Border>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_win:Style>
  <Style x:Key="MaterialDatePickerStyle" TargetType="DatePicker">
    <Setter Property="Background" Value="{StaticResource TextBoxFilledBackgroundColorBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Height" Value="53" />
    <Setter Property="CornerRadius" Value="4,4,0,0" />
    <not_win:Setter Property="FlyoutPresenterStyle" Value="{StaticResource MaterialDatePickerFlyoutPresenterStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePicker">
          <!-- Root Grid -->
          <Grid x:Name="LayoutRoot">
            <!-- Flyout Button -->
            <Button x:Name="FlyoutButton" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource DatePickerFlyoutButtonStyle}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}">
              <Grid Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                <!-- Border -->
                <Rectangle x:Name="BottomBorder" Height="2" VerticalAlignment="Bottom" Fill="{TemplateBinding BorderBrush}" />
                <!-- Header -->
                <TextBlock x:Name="HeaderTextBlock" Margin="10,8,10,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialCaption}" Text="{TemplateBinding Header}" TextWrapping="Wrap" />
                <Grid x:Name="FlyoutButtonContentGrid" Height="24" Margin="6,24,10,0" VerticalAlignment="Top">
                  <!-- DateText -->
                  <TextBlock x:Name="DateText" Style="{StaticResource MaterialBody2}" Text="{Binding SelectedDate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringFormatConverter}, ConverterParameter=' {0:d}'}" />
                  <!-- PlaceholderText -->
                  <TextBlock x:Name="PlaceholderText" Margin="4,0,0,0" Foreground="{StaticResource MaterialOnSurfaceLowBrush}" Style="{StaticResource MaterialBody2}" Text="{TemplateBinding Header}" Visibility="Collapsed" />
                  <!-- Removing this cause trouble with the DatePicker code -->
                  <TextBlock x:Name="DayTextBlock" Opacity="0" />
                </Grid>
              </Grid>
            </Button>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="DateText.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="HeaderTextBlock.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="BottomBorder.Fill" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HasDateStates">
                <VisualState x:Name="HasDate" />
                <VisualState x:Name="HasNoDate">
                  <VisualState.Setters>
                    <Setter Target="DateText.Visibility" Value="Collapsed" />
                    <Setter Target="PlaceholderText.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryDatePickerStyle" BasedOn="{StaticResource MaterialDatePickerStyle}" TargetType="DatePicker">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\FloatingActionButton.xaml-->
  <SolidColorBrush x:Key="ButtonFabFocusOverlayBackgroundColor" Color="Transparent" />
  <SolidColorBrush x:Key="ButtonFabLowFabBackgroundColorBrush" Color="{ThemeResource ButtonFabLowFabBackgroundColor}" />
  <StaticResource x:Key="ButtonFabFocusOverlayBorderColor" ResourceKey="MaterialOnPrimaryBrush" />
  <x:Double x:Key="MaterialFabFontSize">14</x:Double>
  <CornerRadius x:Key="MaterialFabLargeCorderRadius">28</CornerRadius>
  <Thickness x:Key="MaterialFabLargePadding">20</Thickness>
  <CornerRadius x:Key="MaterialFabSmallCorderRadius">20</CornerRadius>
  <Thickness x:Key="MaterialFabSmallPadding">12</Thickness>
  <x:Double x:Key="MaterialFabContentWidthOrHeight">16</x:Double>
  <x:Double x:Key="MaterialFabIconTextPadding">12</x:Double>
  <Style x:Key="MaterialFabStyle" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialFabFontSize}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabLargeCorderRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabLargePadding}" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,6,6" Elevation="6" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}">
                  <StackPanel x:Name="ContentPanel" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                    <!-- Icon -->
                    <Viewbox Height="{StaticResource MaterialFabContentWidthOrHeight}" Width="{StaticResource MaterialFabContentWidthOrHeight}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!-- Icon/Content spacing -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{StaticResource MaterialButtonCornerRadius}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </StackPanel>
                  <Border x:Name="FabFocusBorder" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource ButtonFabLowFabBackgroundColorBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup>
                <!-- Known Issue - Must be applied before smalldevices else issues on wasm and ios -->
                <VisualState x:Name="OtherDevices">
                  <VisualState.StateTriggers>
                    <AdaptiveTrigger MinWindowWidth="460" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="SmallDevices">
                  <VisualState.StateTriggers>
                    <AdaptiveTrigger MinWindowWidth="0" />
                  </VisualState.StateTriggers>
                  <VisualState.Setters>
                    <Setter Target="ElevatedView.CornerRadius" Value="{StaticResource MaterialFabSmallCorderRadius}" />
                    <Setter Target="Ripple.CornerRadius" Value="{StaticResource MaterialFabSmallCorderRadius}" />
                    <Setter Target="ContentPanel.Margin" Value="{StaticResource MaterialFabSmallPadding}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSmallFabStyle" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialFabFontSize}" />
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabSmallCorderRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabSmallPadding}" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,4,4" Elevation="4" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource MaterialPressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}">
                  <StackPanel x:Name="ContentPanel" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                    <!-- Icon -->
                    <Viewbox Height="{StaticResource MaterialFabContentWidthOrHeight}" Width="{StaticResource MaterialFabContentWidthOrHeight}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!-- Icon/Content spacing -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!-- Content -->
                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{StaticResource MaterialButtonCornerRadius}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </StackPanel>
                  <Border x:Name="FabFocusBorder" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource ButtonFabLowFabBackgroundColorBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FabFocusBorder.Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSecondaryBrush}" />
  </Style>
  <Style x:Key="MaterialPrimaryInvertedFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialOnPrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
  </Style>
  <Style x:Key="MaterialSecondaryInvertedFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialBackgroundBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\Flyout.xaml-->
  <x:String x:Key="RightArrowPathStyle">M0,0L25.194,16 0,32z</x:String>
  <x:Double x:Key="FlyoutPresenterMinWidth">112</x:Double>
  <x:Double x:Key="FlyoutMenuItemHeight">48</x:Double>
  <GridLength x:Key="FlyoutMenuItemRightMargin">38</GridLength>
  <x:Double x:Key="FlyoutMenuItemIconHeight">16</x:Double>
  <x:Double x:Key="FlyoutMenuItemIconWidth">16</x:Double>
  <x:Double x:Key="FlyoutMenuToggleCheckGlyphWidth">16</x:Double>
  <x:Double x:Key="FlyoutMenuToggleCheckGlyphHeight">16</x:Double>
  <x:Double x:Key="FlyoutMenuSeparatorHeight">1</x:Double>
  <Style x:Key="MaterialFlyoutPresenterStyle" TargetType="FlyoutPresenter">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="MinWidth" Value="NaN" />
    <Setter Property="MinHeight" Value="NaN" />
    <Setter Property="MaxWidth" Value="NaN" />
    <Setter Property="MaxHeight" Value="NaN" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="FlyoutPresenter">
          <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <Border.Transitions>
              <TransitionCollection>
                <PaneThemeTransition Edge="Bottom" />
              </TransitionCollection>
            </Border.Transitions>
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialContentFlyoutPresenterStyle" TargetType="FlyoutPresenter">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="MinWidth" Value="{StaticResource FlyoutPresenterMinWidth}" />
    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="Margin" Value="16" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="Margin" Value="16,0" />
  </Style>
  <Style x:Key="MaterialMenuFlyoutPresenterStyle" TargetType="MenuFlyoutPresenter">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="MinWidth" Value="{StaticResource FlyoutPresenterMinWidth}" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="Margin" Value="0,0" />
  </Style>
  <Style x:Key="MaterialMenuFlyoutItemStyle" TargetType="MenuFlyoutItem">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource FlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource MaterialOnSurfacePressedBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerDownThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="{StaticResource MaterialLowOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckPlaceholderStates">
                <VisualState x:Name="NoPlaceholder" />
                <VisualState x:Name="CheckPlaceholder" />
                <VisualState x:Name="IconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckAndIconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="IconRoot.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="KeyboardAcceleratorTextVisibility">
                <VisualState x:Name="KeyboardAcceleratorTextCollapsed" />
                <VisualState x:Name="KeyboardAcceleratorTextVisible">
                  <VisualState.Setters>
                    <Setter Target="KeyboardAcceleratorTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="{StaticResource FlyoutMenuItemRightMargin}" />
              <ColumnDefinition Width="Auto" MinWidth="16" />
            </Grid.ColumnDefinitions>
            <Viewbox x:Name="IconRoot" HorizontalAlignment="Left" VerticalAlignment="Center" Width="{StaticResource FlyoutMenuItemIconWidth}" Visibility="Collapsed" Margin="16,2,0,0">
              <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" />
            </Viewbox>
            <TextBlock x:Name="TextBlock" Text="{TemplateBinding Text}" Style="{StaticResource MaterialBody2}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" Margin="16,0,0,0" Grid.Column="1" />
            <!-- Mobile devices do not support keyboard shortcuts -->
            <Grid ios:Visibility="Collapsed" android:Visibility="Collapsed" Grid.Column="3">
              <TextBlock x:Name="KeyboardAcceleratorTextBlock" Text="{TemplateBinding KeyboardAcceleratorTextOverride}" Style="{StaticResource MaterialBody2}" Foreground="{ThemeResource MenuFlyoutItemKeyboardAcceleratorTextForeground}" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.KeyboardAcceleratorTextMinWidth}" TextAlignment="Right" VerticalAlignment="Center" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" Margin="16,0" />
            </Grid>
            <!-- Overlay -->
            <Border x:Name="CommonStatesOverlay" Background="Transparent" Grid.Column="0" Grid.ColumnSpan="4" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialToggleMenuFlyoutItemStyle" TargetType="ToggleMenuFlyoutItem">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource FlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleMenuFlyoutItem">
          <Grid x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource MaterialOnSurfacePressedBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerDownThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="{StaticResource MaterialLowOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="UncheckedWithIcon">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedWithIcon">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="KeyboardAcceleratorTextVisibility">
                <VisualState x:Name="KeyboardAcceleratorTextCollapsed" />
                <VisualState x:Name="KeyboardAcceleratorTextVisible">
                  <VisualState.Setters>
                    <Setter Target="KeyboardAcceleratorTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="AnimationRoot">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{StaticResource FlyoutMenuItemRightMargin}" />
                <ColumnDefinition Width="Auto" MinWidth="16" />
              </Grid.ColumnDefinitions>
              <Path x:Name="CheckGlyph" Data="{StaticResource CheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" Stretch="Uniform" Opacity="0" Width="{StaticResource FlyoutMenuToggleCheckGlyphWidth}" Height="{StaticResource FlyoutMenuToggleCheckGlyphHeight}" win:Margin="16,0" not_win:Margin="16,4,16,0" />
              <Viewbox x:Name="IconRoot" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Width="{StaticResource FlyoutMenuItemIconWidth}" Height="{StaticResource FlyoutMenuItemIconHeight}" Visibility="Collapsed">
                <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" />
              </Viewbox>
              <TextBlock x:Name="TextBlock" Text="{TemplateBinding Text}" Style="{StaticResource MaterialBody2}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="1" />
              <!-- Mobile devices do not support keyboard shortcuts -->
              <Grid ios:Visibility="Collapsed" android:Visibility="Collapsed" Grid.Column="3">
                <TextBlock x:Name="KeyboardAcceleratorTextBlock" Text="{TemplateBinding KeyboardAcceleratorTextOverride}" Style="{StaticResource MaterialBody2}" Visibility="{Binding KeyboardAcceleratorTextOverride, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" Foreground="{ThemeResource ToggleMenuFlyoutItemKeyboardAcceleratorTextForeground}" VerticalAlignment="Center" TextAlignment="Right" AutomationProperties.AccessibilityView="Raw" Margin="16,0" />
              </Grid>
            </Grid>
            <!-- Overlay -->
            <Border x:Name="CommonStatesOverlay" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMenuFlyoutSubItemStyle" TargetType="MenuFlyoutSubItem">
    <Setter Property="Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource FlyoutMenuItemHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutSubItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource MaterialOnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource MaterialOnSurfacePressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SubMenuOpened">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource MaterialOnSurfaceSelectedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="{StaticResource MaterialLowOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckPlaceholderStates">
                <VisualState x:Name="NoPlaceholder" />
                <VisualState x:Name="CheckPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckAndIconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemDoublePlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="16,0,0,0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconRoot" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Center" Width="{StaticResource FlyoutMenuItemIconWidth}" Height="{StaticResource FlyoutMenuItemIconHeight}" Visibility="Collapsed">
                <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" />
              </Viewbox>
              <TextBlock x:Name="TextBlock" Text="{TemplateBinding Text}" Style="{StaticResource MaterialBody2}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="0" />
              <Path x:Name="SubItemChevron" Data="{StaticResource RightArrowPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" Stretch="Uniform" Width="6" Height="10" Margin="54,4,16,0" Grid.Column="1" />
            </Grid>
            <!-- Overlay -->
            <Border x:Name="CommonStatesOverlay" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMenuFlyoutSeparatorStyle" TargetType="MenuFlyoutSeparator">
    <Setter Property="Background" Value="{StaticResource MaterialOnSurfaceFocusedBrush}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Height" Value="{StaticResource FlyoutMenuSeparatorHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutSeparator">
          <Rectangle Fill="{TemplateBinding Background}" Margin="{TemplateBinding Padding}" Height="{TemplateBinding Height}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\HyperlinkButton.xaml-->
  <Style x:Key="MaterialHyperlinkButtonStyle" TargetType="HyperlinkButton">
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="HyperlinkButton">
          <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="Content.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="Content.Opacity" Value="{StaticResource MaterialLowOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialTextButtonLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Content" MinHeight="{TemplateBinding MinHeight}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}">
              <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Top" TextWrapping="Wrap" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryHyperlinkButtonStyle" TargetType="HyperlinkButton" BasedOn="{StaticResource MaterialHyperlinkButtonStyle}">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\InfoBar.xaml-->
  <Color x:Key="InfoBarWarningSeverityColor">#FFCC44</Color>
  <Color x:Key="InfoBarSuccessSeverityColor">#85D174</Color>
  <x:String x:Key="CloseGlyphPathData">M1.442037,0L16.002031,14.585751 30.588022,0.025996563 32.001024,1.4409965 17.414783,16.001002 31.97503,30.587006 30.560022,32 15.999268,17.413969 1.4130009,31.973999 0,30.558998 14.586494,15.998742 0.027028472,1.4140019z</x:String>
  <SolidColorBrush x:Key="InfoBarWarningSeverityBrush" Color="{StaticResource InfoBarWarningSeverityColor}" />
  <SolidColorBrush x:Key="InfoBarSuccessSeverityBrush" Color="{StaticResource InfoBarSuccessSeverityColor}" />
  <Style x:Key="MaterialInfoBarStyle" TargetType="controls:InfoBar">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="{StaticResource MaterialBackgroundBrush}" />
    <win:Setter Property="BorderBrush" Value="Black" />
    <win:Setter Property="BorderThickness" Value="1" />
    <win:Setter Property="MinHeight" Value="120" />
    <win:Setter Property="Severity" Value="Informational" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:InfoBar">
          <toolkit:ElevatedView x:Name="Root" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="4">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SeverityLevels">
                <VisualState x:Name="Informational" />
                <VisualState x:Name="Error">
                  <VisualState.Setters>
                    <Setter Target="SeverityLevel.BorderBrush" Value="{StaticResource MaterialErrorBrush}" />
                    <Setter Target="SeverityLevel.BorderThickness" Value="0,0,0,4" />
                    <Setter Target="StandardIcon.Glyph" Value="{StaticResource InfoBarSuccessIconGlyph}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Warning">
                  <VisualState.Setters>
                    <Setter Target="SeverityLevel.BorderBrush" Value="{StaticResource InfoBarWarningSeverityBrush}" />
                    <Setter Target="SeverityLevel.BorderThickness" Value="0,0,0,4" />
                    <Setter Target="StandardIcon.Glyph" Value="{StaticResource InfoBarSuccessIconGlyph}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Success">
                  <VisualState.Setters>
                    <Setter Target="SeverityLevel.BorderBrush" Value="{StaticResource InfoBarSuccessSeverityBrush}" />
                    <Setter Target="SeverityLevel.BorderThickness" Value="0,0,0,4" />
                    <Setter Target="StandardIcon.Glyph" Value="{StaticResource InfoBarSuccessIconGlyph}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="StandardIconVisible">
                  <VisualState.Setters>
                    <Setter Target="StandardIcon.Visibility" Value="Visible" />
                    <Setter Target="UserIconBorder.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="UserIconVisible">
                  <VisualState.Setters>
                    <Setter Target="UserIconBorder.Visibility" Value="Visible" />
                    <Setter Target="StandardIcon.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoIconVisible" />
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="CloseButtonVisible" />
                <VisualState x:Name="CloseButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="InfoBarVisibility">
                <VisualState x:Name="InfoBarVisible" />
                <VisualState x:Name="InfoBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="ForegroundNotSet" />
                <VisualState x:Name="ForegroundSet">
                  <VisualState.Setters>
                    <Setter Target="Title.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                    <Setter Target="Message.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="ContentRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
              <Grid x:Name="SeverityLevel" Padding="0,24,8,8" BorderBrush="Transparent" BorderThickness="0,0,0,4">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid VerticalAlignment="Top">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <!--  Font Icon  -->
                  <FontIcon x:Name="StandardIcon" Margin="16,0,0,0" Grid.Column="0" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" FontSize="40" Foreground="{StaticResource MaterialPrimaryBrush}" Glyph="{StaticResource InfoBarInformationalIconGlyph}" Visibility="Collapsed" />
                  <!--  Icon Parent  -->
                  <Border x:Name="UserIconBorder" Width="40" Height="40" Margin="16,0,0,0" VerticalAlignment="Center" Grid.Column="0" Child="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IconElement}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsIconVisible, Converter={StaticResource TrueToVisible}, TargetNullValue=Collapsed, FallbackValue=Collapsed}" />
                  <StackPanel VerticalAlignment="Center" Margin="24,0,0,0" Grid.Column="1">
                    <!--  Title  -->
                    <TextBlock x:Name="Title" Style="{StaticResource MaterialSubtitle2}" Text="{TemplateBinding Title}" Visibility="{Binding Title, Converter={StaticResource MaterialEmptyToVisible}, FallbackValue=Collapsed}" TextWrapping="Wrap" />
                    <!--  Message  -->
                    <TextBlock x:Name="Message" Style="{StaticResource MaterialBody2}" Text="{TemplateBinding Message}" TextWrapping="Wrap" />
                  </StackPanel>
                  <!--  Action Button  -->
                  <ContentPresenter HorizontalAlignment="Right" VerticalAlignment="Center" Content="{TemplateBinding ActionButton}" Grid.Column="2" />
                </Grid>
                <!--  Content  -->
                <ContentPresenter Grid.Row="1" VerticalAlignment="Bottom" HorizontalAlignment="Right" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
              </Grid>
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\ListView.xaml-->
  <Style x:Key="MaterialListViewItemStyle" TargetType="ListViewItem">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{ThemeResource ListViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource ListViewItemForeground}" />
    <Setter Property="TabNavigation" Value="Local" />
    <Setter Property="IsHoldingEnabled" Value="True" />
    <Setter Property="Padding" Value="12,0,12,0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
    <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}" />
    <Setter Property="AllowDrop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="FocusVisualPrimaryBrush" Value="{ThemeResource ListViewItemFocusVisualPrimaryBrush}" />
    <Setter Property="FocusVisualPrimaryThickness" Value="2" />
    <Setter Property="FocusVisualSecondaryBrush" Value="{ThemeResource ListViewItemFocusVisualSecondaryBrush}" />
    <Setter Property="FocusVisualSecondaryThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListViewItem">
          <Grid x:Name="ContentBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource MaterialPrimaryHoverBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource MaterialPrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerDownThemeAnimation TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource MaterialPrimarySelectedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource MaterialPrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource MaterialPrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerDownThemeAnimation TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="MultiSelectStates">
                <VisualState x:Name="MultiSelectDisabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="-32" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="32" KeySpline="0.1,0.9,0.2,1" />
                    </win:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      <DiscreteObjectKeyFrame KeyTime="0:0:0.333" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultiSelectEnabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </win:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterGrid" Storyboard.TargetProperty="Margin">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="32,0,0,0" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DataVirtualizationStates">
                <VisualState x:Name="DataAvailable" />
                <VisualState x:Name="DataPlaceholder">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextBlock" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderRect" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ReorderHintStates">
                <VisualState x:Name="NoReorderHint" />
                <VisualState x:Name="BottomReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Bottom" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="TopReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Top" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="RightReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Right" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="LeftReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Left" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition To="NoReorderHint" GeneratedDuration="0:0:0.2" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DragStates">
                <VisualState x:Name="NotDragging" />
                <VisualState x:Name="Dragging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDragThemeOpacity}" />
                    <win:DragItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggingTarget">
                  <Storyboard>
                    <win:DropTargetItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleDraggingPrimary">
                  <Storyboard>
                    <!-- These two Opacity animations are required - the FadeInThemeAnimations
										 on the same elements animate an internal Opacity. -->
                    <DoubleAnimation Storyboard.TargetName="MultiArrangeOverlayBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="MultiArrangeOverlayText" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDragThemeOpacity}" />
                    <win:FadeInThemeAnimation TargetName="MultiArrangeOverlayBackground" />
                    <win:FadeInThemeAnimation TargetName="MultiArrangeOverlayText" />
                    <win:DragItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleDraggingSecondary">
                  <Storyboard>
                    <win:FadeOutThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggedPlaceholder">
                  <Storyboard>
                    <win:FadeOutThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition To="NotDragging" GeneratedDuration="0:0:0.2" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="BorderBackground" IsHitTestVisible="False" Fill="{ThemeResource SystemControlHighlightListAccentLowBrush}" Opacity="0" Control.IsTemplateFocusTarget="True" />
            <Grid x:Name="ContentPresenterGrid" Background="Transparent" Margin="0,0,0,0">
              <Grid.RenderTransform>
                <TranslateTransform x:Name="ContentPresenterTranslateTransform" />
              </Grid.RenderTransform>
              <ContentPresenter x:Name="ContentPresenter" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" xamarin:ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
            </Grid>
            <!-- The 'Xg' text simulates the amount of space one line of text will occupy.
						  In the DataPlaceholder state, the Content is not loaded yet so we
						  approximate the size of the item using placeholder text. -->
            <TextBlock x:Name="PlaceholderTextBlock" Opacity="0" Text="Xg" Foreground="{x:Null}" Margin="{TemplateBinding Padding}" IsHitTestVisible="False" AutomationProperties.AccessibilityView="Raw" />
            <Rectangle x:Name="PlaceholderRect" Visibility="Collapsed" Fill="{ThemeResource ListViewItemPlaceholderBackgroundThemeBrush}" />
            <Rectangle x:Name="MultiArrangeOverlayBackground" IsHitTestVisible="False" Opacity="0" Fill="{ThemeResource ListViewItemDragBackgroundThemeBrush}" Grid.ColumnSpan="2" />
            <Border x:Name="MultiSelectSquare" BorderBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" BorderThickness="2" Width="20" Height="20" Margin="12,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed">
              <Border.Clip>
                <RectangleGeometry Rect="0,0,20,20">
                  <win:RectangleGeometry.Transform>
                    <TranslateTransform x:Name="MultiSelectClipTransform" />
                  </win:RectangleGeometry.Transform>
                </RectangleGeometry>
              </Border.Clip>
              <Border.RenderTransform>
                <TranslateTransform x:Name="MultiSelectCheckBoxTransform" />
              </Border.RenderTransform>
              <FontIcon x:Name="MultiSelectCheck" FontFamily="{ThemeResource SymbolThemeFontFamily}" win:Glyph="&#xE73E;" xamarin:Glyph="&#xE081;" FontSize="16" Foreground="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" Visibility="Collapsed" Opacity="0" />
            </Border>
            <TextBlock x:Name="MultiArrangeOverlayText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.DragItemsCount}" Foreground="{ThemeResource ListViewItemDragForegroundThemeBrush}" FontFamily="{StaticResource MaterialRegularFontFamily}" FontSize="26.667" IsHitTestVisible="False" Opacity="0" TextWrapping="Wrap" TextTrimming="WordEllipsis" Margin="18,9,0,0" AutomationProperties.AccessibilityView="Raw" Grid.ColumnSpan="2" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseMaterialListViewStyle" TargetType="ListView">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialListViewItemStyle}" />
  </Style>
  <Style x:Key="MaterialListViewStyle" TargetType="ListView" BasedOn="{StaticResource BaseMaterialListViewStyle}">
    <Setter Property="SelectionMode" Value="None" />
    <Setter Property="IsItemClickEnabled" Value="True" />
  </Style>
  <Style x:Key="MaterialListViewDetailsStyle" TargetType="ListView" BasedOn="{StaticResource BaseMaterialListViewStyle}">
    <Setter Property="SelectionMode" Value="Single" />
    <Setter Property="IsItemClickEnabled" Value="False" />
  </Style>
  <!--origin: Styles\Controls\v1\NavigationView\NavigationView_MUX.xaml-->
  <Thickness x:Key="MaterialMUXNavigationViewAutoSuggestBoxMargin">10,0,16,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewAutoSuggestBoxMargin">12,0,12,0</Thickness>
  <x:Double x:Key="MaterialMUXNavigationViewPaneToggleButtonSize">40</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewPaneToggleButtonHeight">40</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewPaneToggleButtonWidth">40</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewCompactPaneLength">40</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewTopPaneHeight">40</x:Double>
  <x:Double x:Key="MaterialMUXTopNavigationViewPaneCustomContentMinWidth">48</x:Double>
  <x:Double x:Key="MaterialMUXTopNavigationViewOverflowButtonWidth">48</x:Double>
  <x:Double x:Key="MaterialMUXTopNavigationViewOverflowButtonHeight">40</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewItemOnLeftMinHeight">40</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewPaneHeaderRowMinHeight">4</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewItemSeparatorHeight">1</x:Double>
  <x:Double x:Key="MaterialMUXTopNavigationViewItemSeparatorWidth">1</x:Double>
  <Thickness x:Key="MaterialMUXNavigationViewToggleBorderThickness">1</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemBorderThickness">1</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemOnLeftIconBoxMargin">12,0,12,0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemInnerHeaderMargin">10,0,0,0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewMinimalHeaderMargin">8,5,0,0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewHeaderMargin">12,5,0,11</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewPaneTitlePresenterMargin">8,4,0,0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemSeparatorMargin">16,10</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewCompactItemSeparatorMargin">16,10</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemSeparatorMargin">10,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewOverflowButtonMargin">0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemContentPresenterMargin">0,0,20,0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewCompactItemContentPresenterMargin">0,0,0,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemContentPresenterMargin">8,0,16,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemContentOnlyContentPresenterMargin">12,0</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemExpandChevronMargin">-20,0,6,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemExpandChevronMargin">-16,0,0,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemIconOnlyExpandChevronMargin">0,0,0,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemContentOnlyExpandChevronMargin">-12,0,0,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemOnOverflowContentPresenterMargin">12,0,20,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemOnOverflowNoIconContentPresenterMargin">16,0,20,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemOnOverflowExpandChevronMargin">-4,0,6,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewItemOnOverflowExpandChevronPadding">12,0,12,0</Thickness>
  <Thickness x:Key="MaterialMUXTopNavigationViewOverflowMenuPadding">0,8</Thickness>
  <Thickness x:Key="MaterialMUXNavigationViewItemChildrenMenuFlyoutPadding">0,8</Thickness>
  <x:Double x:Key="MaterialMUXNavigationViewItemExpandedGlyphFontSize">12.0</x:Double>
  <x:String x:Key="MaterialMUXNavigationViewItemExpandedGlyph">&#xE70D;</x:String>
  <x:Double x:Key="MaterialMUXNavigationViewItemBackgroundPointerOverOpacity">0.12</x:Double>
  <x:Double x:Key="MaterialMUXNavigationViewItemBackgroundPressedOpacity">0.12</x:Double>
  <StaticResource x:Key="MaterialMUXNavigationViewDefaultPaneBackground" ResourceKey="MaterialSurfaceBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewSelectionIndicatorForeground" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewPaneBorderBrush" ResourceKey="MaterialOnSurfaceLowVariantBrush" />
  <Thickness x:Key="MaterialMUXNavigationViewPaneBorderThickness">0,0,1,0</Thickness>
  <SolidColorBrush x:Key="MaterialMUXNavigationViewItemBackgroundPointerOver" Color="{ThemeResource MaterialPrimaryColor}" Opacity="{StaticResource MaterialMUXNavigationViewItemBackgroundPointerOverOpacity}" />
  <SolidColorBrush x:Key="MaterialMUXNavigationViewItemBackgroundPressed" Color="{ThemeResource MaterialPrimaryColor}" Opacity="{StaticResource MaterialMUXNavigationViewItemBackgroundPressedOpacity}" />
  <SolidColorBrush x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPointerOver" Color="{ThemeResource MaterialPrimaryColor}" Opacity="{StaticResource MaterialMUXNavigationViewItemBackgroundPointerOverOpacity}" />
  <SolidColorBrush x:Key="MaterialMUXNavigationViewItemBackgroundCheckedPressed" Color="{ThemeResource MaterialPrimaryColor}" Opacity="{StaticResource MaterialMUXNavigationViewItemBackgroundPressedOpacity}" />
  <SolidColorBrush x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPointerOver" Color="{ThemeResource MaterialPrimaryColor}" Opacity="{StaticResource MaterialMUXNavigationViewItemBackgroundPointerOverOpacity}" />
  <SolidColorBrush x:Key="MaterialMUXNavigationViewItemBackgroundSelectedPressed" Color="{ThemeResource MaterialPrimaryColor}" Opacity="{StaticResource MaterialMUXNavigationViewItemBackgroundPressedOpacity}" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForeground" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPointerOver" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundPressed" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundDisabled" ResourceKey="MaterialOnSurfaceLowBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundChecked" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPointerOver" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedPressed" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundCheckedDisabled" ResourceKey="MaterialOnSecondaryLowBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelected" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPointerOver" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedPressed" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewItemForegroundSelectedDisabled" ResourceKey="MaterialOnSecondaryLowBrush" />
  <StaticResource x:Key="MaterialMUXNavigationViewRippleFeedback" ResourceKey="MaterialPrimaryFocusedBrush" />
  <Thickness x:Key="MaterialMUXNavigationViewItemPadding">8,2</Thickness>
  <CornerRadius x:Key="MaterialMUXNavigationViewItemCornerRadius">4</CornerRadius>
  <xamarin:Style x:Key="MaterialMUXNavigationViewResetSplitViewStyle" TargetType="SplitView">
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="OpenPaneLength" Value="{ThemeResource SplitViewOpenPaneThemeLength}" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource SplitViewCompactPaneThemeLength}" />
    <Setter Property="PaneBackground" Value="{ThemeResource SystemControlPageBackgroundChromeLowBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="SplitView">
          <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Closed" To="OpenOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.35" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Closed" To="OpenOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.35" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactLeft" To="OpenCompactOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactRight" To="OpenCompactOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayLeft" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="0" To="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.12" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayRight" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.12" />
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayLeft" To="ClosedCompactLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayRight" To="ClosedCompactRight">
                    <Storyboard>
                      <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.RightClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </xamarin:ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Closed">
                  <!-- Workaround because values aren't properly reset on Wasm. -->
                  <!--<Storyboard>
										<netstdref:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
																			Storyboard.TargetName="PaneRoot">
											<DiscreteObjectKeyFrame KeyTime="0:0:0"
																	Value="Collapsed" />
										</netstdref:ObjectAnimationUsingKeyFrames>
										<netstdref:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Column)"
																			Storyboard.TargetName="ContentRoot">
											<DiscreteObjectKeyFrame KeyTime="0:0:0"
																	Value="0" />
										</netstdref:ObjectAnimationUsingKeyFrames>
									</Storyboard>-->
                </VisualState>
                <VisualState x:Name="ClosedCompactLeft">
                  <VisualState.Setters>
                    <Setter Target="PaneTransform.TranslateX" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.LeftClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:DoubleAnimation Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ClosedCompactRight">
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.RightClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="2" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:DoubleAnimation Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineLeft">
                  <VisualState.Setters>
                    <Setter Target="PaneTransform.TranslateX" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Null}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <ColumnDefinition x:Name="ColumnDefinition2" Width="*" />
            </Grid.ColumnDefinitions>
            <!-- Content Area -->
            <Grid x:Name="ContentRoot" Grid.ColumnSpan="2">
              <Border Child="{TemplateBinding Content}" />
              <win:Rectangle x:Name="LightDismissLayer" Fill="{StaticResource SplitViewDismissBackgroundColor}" Visibility="Collapsed" />
              <xamarin:Button x:Name="LightDismissLayer" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Button.Template>
                  <ControlTemplate>
                    <Border Background="{StaticResource SplitViewDismissBackgroundColor}" />
                  </ControlTemplate>
                </Button.Template>
              </xamarin:Button>
            </Grid>
            <!-- Pane Content Area -->
            <Grid x:Name="PaneRoot" Grid.ColumnSpan="2" HorizontalAlignment="Left" Visibility="Collapsed" Background="{TemplateBinding PaneBackground}" Width="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <win:Grid.Clip>
                <RectangleGeometry x:Name="PaneClipRectangle">
                  <win:RectangleGeometry.Transform>
                    <CompositeTransform x:Name="PaneClipRectangleTransform" />
                  </win:RectangleGeometry.Transform>
                </RectangleGeometry>
              </win:Grid.Clip>
              <Grid.RenderTransform>
                <CompositeTransform x:Name="PaneTransform" />
              </Grid.RenderTransform>
              <Border Child="{TemplateBinding Pane}" />
              <Rectangle x:Name="HCPaneBorder" Visibility="Collapsed" Fill="{ThemeResource SystemControlForegroundTransparentBrush}" x:DeferLoadStrategy="Lazy" Width="1" HorizontalAlignment="Right" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </xamarin:Style>
  <Style x:Key="MaterialMUXNavigationViewPaneToggleButtonStyle" TargetType="Button">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontFamily" Value="{StaticResource SymbolThemeFontFamily}" />
    <Setter Property="MinHeight" Value="{StaticResource MaterialMUXNavigationViewPaneToggleButtonHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource MaterialMUXNavigationViewPaneToggleButtonWidth}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForeground}" />
    <Setter Property="BorderThickness" Value="{ThemeResource MaterialMUXNavigationViewToggleBorderThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="LayoutRoot" MinWidth="{TemplateBinding MinWidth}" Height="{TemplateBinding MinHeight}" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PaneToggleButtonIconWidthColumn" Width="{ThemeResource MaterialMUXNavigationViewPaneToggleButtonWidth}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="{ThemeResource MaterialMUXNavigationViewPaneToggleButtonHeight}" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewButtonBackgroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewButtonForegroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewButtonForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewButtonBackgroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewButtonForegroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewButtonForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewButtonBackgroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewButtonForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundChecked}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Viewbox x:Name="IconHost" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
              <TextBlock x:Name="Icon" Text="&#xE700;" FontFamily="{StaticResource SymbolThemeFontFamily}" FontSize="{TemplateBinding FontSize}" AutomationProperties.AccessibilityView="Raw" />
            </Viewbox>
            <ContentPresenter x:Name="ContentPresenter" VerticalContentAlignment="Center" Content="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" Grid.Column="1" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMUXNavigationViewPaneSearchButtonStyle" TargetType="Button">
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="Content" Value="&#xE11A;" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="BorderThickness" Value="{ThemeResource MaterialMUXNavigationViewToggleBorderThickness}" />
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForeground}" />
  </Style>
  <Style x:Key="MaterialMUXNavigationViewOverflowButtonStyleWhenPaneOnTop" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialMUXNavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{StaticResource MaterialMUXTopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{StaticResource MaterialMUXTopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <FontIcon x:Name="Icon" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xE10C;" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMUXNavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialMUXNavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{StaticResource MaterialMUXTopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{StaticResource MaterialMUXTopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <FontIcon x:Name="Icon" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xE10C;" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMUXNavigationViewItemHeaderTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
    <Setter Property="FontWeight" Value="SemiBold" />
    <Setter Property="OpticalMarginAlignment" Value="TrimSideBearings" />
    <Setter Property="TextWrapping" Value="NoWrap" />
  </Style>
  <Style x:Key="MaterialMUXNavigationViewTitleHeaderContentControlTextStyle" TargetType="ContentControl">
    <Setter Property="FontWeight" Value="SemiLight" />
    <Setter Property="FontSize" Value="24" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Margin" Value="{ThemeResource MaterialMUXNavigationViewHeaderMargin}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MaterialMUXNavigationViewStyle" TargetType="controls:NavigationView">
    <Setter Property="PaneToggleButtonStyle" Value="{StaticResource MaterialMUXNavigationViewPaneToggleButtonStyle}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource MaterialMUXNavigationViewCompactPaneLength}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationView">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeGroup">
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Expanded" />
                <VisualState x:Name="Minimal">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource MaterialMUXNavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopNavigationMinimal" />
                <VisualState x:Name="MinimalWithBackButton">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource MaterialMUXNavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TogglePaneGroup">
                <VisualState x:Name="TogglePaneButtonVisible" />
                <VisualState x:Name="TogglePaneButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderGroup">
                <VisualState x:Name="HeaderVisible" />
                <VisualState x:Name="HeaderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AutoSuggestGroup">
                <VisualState x:Name="AutoSuggestBoxVisible" />
                <VisualState x:Name="AutoSuggestBoxCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateGroup">
                <VisualState x:Name="NotClosedCompact" />
                <VisualState x:Name="ClosedCompact" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateListSizeGroup">
                <VisualState x:Name="ListSizeFull" />
                <VisualState x:Name="ListSizeCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <Setter Target="PaneTitleTextBlock.Visibility" Value="Collapsed" />
                    <Setter Target="PaneHeaderContentBorder.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBarVisibilityGroup">
                <VisualState x:Name="TitleBarVisible" />
                <VisualState x:Name="TitleBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Margin" Value="0,32,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="OverflowLabelGroup">
                <VisualState x:Name="OverflowButtonWithLabel" />
                <VisualState x:Name="OverflowButtonNoLabel" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="BackButtonGroup">
                <VisualState x:Name="BackButtonVisible" />
                <VisualState x:Name="BackButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="BackButtonPlaceholderOnTopNav.Width" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneVisibilityGroup">
                <VisualState x:Name="PaneVisible" />
                <VisualState x:Name="PaneCollapsed">
                  <VisualState.Setters>
                    <!-- Note that RootSplitView.DisplayMode is set in code so we don't want to -->
                    <!-- write it here and interfere. But these values work together to hide -->
                    <!-- the left pane. -->
                    <Setter Target="RootSplitView.CompactPaneLength" Value="0" />
                    <Setter Target="PaneToggleButtonGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Content layouts -->
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!-- DisplayMode top -->
              <StackPanel x:Name="TopNavArea" />
              <!-- Displaymode (compact/minimal/normal) left -->
              <SplitView x:Name="RootSplitView" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" DisplayMode="Inline" IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}" IsTabStop="False" OpenPaneLength="{TemplateBinding OpenPaneLength}" PaneBackground="{ThemeResource MaterialMUXNavigationViewDefaultPaneBackground}" xamarin:Style="{StaticResource MaterialMUXNavigationViewResetSplitViewStyle}" Grid.Row="1">
                <SplitView.Pane>
                  <Grid x:Name="PaneContentGrid" HorizontalAlignment="Left" BorderBrush="{StaticResource MaterialMUXNavigationViewPaneBorderBrush}" BorderThickness="{StaticResource MaterialMUXNavigationViewPaneBorderThickness}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
                    <Grid.RowDefinitions>
                      <RowDefinition x:Name="PaneContentGridToggleButtonRow" Height="Auto" MinHeight="{StaticResource MaterialMUXNavigationViewPaneHeaderRowMinHeight}" />
                      <RowDefinition Height="8" />
                      <!-- above list margin -->
                      <RowDefinition x:Name="ItemsContainerRow" Height="*" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="PaneHeaderContentBorderWrapper" MinHeight="{StaticResource MaterialMUXNavigationViewPaneHeaderRowMinHeight}">
                      <!-- TODO: Uno specific: MinHeight and x:Name used here as RowDefinifiont.MinHeight does not work (issue #4727) -->
                      <Grid.RowDefinitions>
                        <RowDefinition x:Name="PaneHeaderContentBorderRow" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="PaneHeaderCloseButtonColumn" />
                        <ColumnDefinition x:Name="PaneHeaderToggleButtonColumn" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ContentControl x:Name="PaneHeaderContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                    </Grid>
                    <!-- "Non header" content -->
                    <!-- MenuItems -->
                    <ScrollViewer x:Name="ItemsContainerGrid" Grid.Row="2" Margin="0,0,0,8" MinHeight="{ThemeResource MaterialMUXNavigationViewItemOnLeftMinHeight}" TabNavigation="Local" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto">
                      <!-- Left nav ItemsRepeater -->
                      <controls:ItemsRepeater x:Name="MenuItemsHost" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.AccessibilityView="Content" />
                    </ScrollViewer>
                  </Grid>
                </SplitView.Pane>
                <SplitView.Content>
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="ContentTopPadding" Grid.ColumnSpan="2" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}" />
                    <Grid x:Name="ContentLeftPadding" Grid.Row="1" />
                    <ContentControl x:Name="HeaderContent" Grid.Row="1" Grid.Column="1" MinHeight="{StaticResource MaterialMUXNavigationViewPaneToggleButtonHeight}" IsTabStop="False" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource MaterialMUXNavigationViewTitleHeaderContentControlTextStyle}" />
                    <ContentPresenter AutomationProperties.LandmarkType="Main" Grid.Row="2" Grid.ColumnSpan="2" Content="{TemplateBinding Content}" />
                  </Grid>
                </SplitView.Content>
              </SplitView>
            </Grid>
            <!-- Button grid -->
            <!--
							TODO: Uno Specific: Canvas.ZIndex is not implemented, so the
							button Grid is moved below the content SplitView in the template
						-->
            <Grid x:Name="PaneToggleButtonGrid" Margin="0,0,0,8" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.ZIndex="100">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="TogglePaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
              <Grid x:Name="ButtonHolderGrid" Grid.Row="1">
                <Button x:Name="NavigationViewBackButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}" IsEnabled="{TemplateBinding IsBackEnabled}">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewBackButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="NavigationViewCloseButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewCloseButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="TogglePaneButton" Style="{TemplateBinding PaneToggleButtonStyle}" AutomationProperties.LandmarkType="Navigation" HorizontalAlignment="Center" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}" VerticalAlignment="Top">
                  <TextBlock x:Name="PaneTitleTextBlock" Grid.Column="0" Text="{TemplateBinding PaneTitle}" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource MaterialMUXNavigationViewItemHeaderTextStyle}" />
                </Button>
                <Grid x:Name="PaneTitleHolder" Visibility="Collapsed">
                  <ContentControl x:Name="PaneTitlePresenter" Margin="{ThemeResource MaterialMUXNavigationViewPaneTitlePresenterMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialMUXNavigationViewItemPresenterStyleWhenOnLeftPane">
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialMUXNavigationViewItemBorderThickness}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" MinHeight="{ThemeResource MaterialMUXNavigationViewItemOnLeftMinHeight}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPressed}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelected}" />
                    <contract4Present:Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushCheckedDisabled}" />
                    <Setter Target="LayoutRoot.Opacity" Value="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="IconVisible" />
                <VisualState x:Name="IconCollapsed">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="16" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneAndTopLevelItemStates">
                <VisualState x:Name="NotClosedCompactAndTopLevelItem" />
                <VisualState x:Name="ClosedCompactAndTopLevelItem">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialMUXNavigationViewCompactItemContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="BackgroundBorder" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" Margin="{TemplateBinding Padding}" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Border Margin="{TemplateBinding Padding}">
              <!-- dont apply Margin on Ripple, as it will be applied twice (on the Ripple and on its template root) -->
              <!-- material#446: skia:Opacity to workaround Ripple opacity issue -->
              <um:Ripple Feedback="{StaticResource MaterialMUXNavigationViewRippleFeedback}" skia:Opacity="0.12" CornerRadius="{TemplateBinding CornerRadius}" />
            </Border>
            <!-- disabled hit-test because we dont want the content or the chevron to block the click event -->
            <!-- as the ripple above would need it to play its effect -->
            <Grid x:Name="PresenterContentRootGrid" IsHitTestVisible="False">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource MaterialMUXNavigationViewSelectionIndicatorForeground}" Opacity="0.0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid HorizontalAlignment="Stretch" x:Name="ContentGrid" MinHeight="{ThemeResource MaterialMUXNavigationViewItemOnLeftMinHeight}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="IconColumn" Width="{ThemeResource MaterialMUXNavigationViewCompactPaneLength}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Height="16" Margin="{ThemeResource MaterialMUXNavigationViewItemOnLeftIconBoxMargin}">
                  <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource MaterialMUXNavigationViewItemContentPresenterMargin}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialMUXNavigationViewItemExpandChevronMargin}" Background="Transparent">
                  <TextBlock RenderTransformOrigin="0.5, 0.5" Foreground="{ThemeResource MaterialMUXNavigationViewItemForeground}" FontSize="{ThemeResource MaterialMUXNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialMUXNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialMUXNavigationViewItemPresenterStyleWhenOnLeftPaneWithRevealFocus">
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialMUXNavigationViewItemBorderThickness}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" MinHeight="{ThemeResource MaterialMUXNavigationViewItemOnLeftMinHeight}" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource SystemControlHighlightAccentBrush}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource SystemControlHighlightAltChromeWhiteBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource SystemControlHighlightAltChromeWhiteBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="IconVisible" />
                <VisualState x:Name="IconCollapsed">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="16" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneAndTopLevelItemStates">
                <VisualState x:Name="NotClosedCompactAndTopLevelItem" />
                <VisualState x:Name="ClosedCompactAndTopLevelItem">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialMUXNavigationViewCompactItemContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="PresenterContentRootGrid">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource MaterialMUXNavigationViewSelectionIndicatorForeground}" Opacity="0.0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid x:Name="ContentGrid" MinHeight="{ThemeResource MaterialMUXNavigationViewItemOnLeftMinHeight}" HorizontalAlignment="Left">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="IconColumn" Width="{ThemeResource MaterialMUXNavigationViewCompactPaneLength}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Height="16" Margin="{ThemeResource MaterialMUXNavigationViewItemOnLeftIconBoxMargin}">
                  <ContentPresenter x:Name="Icon" Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Icon}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Foreground="{TemplateBinding Foreground}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Margin="{ThemeResource MaterialMUXNavigationViewItemContentPresenterMargin}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialMUXNavigationViewItemExpandChevronMargin}" Background="Transparent">
                  <TextBlock Foreground="{ThemeResource MaterialMUXNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialMUXNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialMUXNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationViewItem" x:Key="MaterialMUXNavigationViewSettingsItemStyleWhenOnTopPane">
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialMUXNavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="IconRow" Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Viewbox x:Name="IconBox" Grid.Row="1" Grid.Column="1" Height="16" Width="48" Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialMUXNavigationViewItemPresenterStyleWhenOnTopPane">
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrushCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="LayoutRoot.MinWidth" Value="48" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="4,0,4,4" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemIconOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemContentOnlyContentPresenterMargin}" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="12,0,12,4" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemContentOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource MaterialMUXTopNavigationViewItemContentPresenterMargin}" TextWrapping="NoWrap" Foreground="{TemplateBinding Foreground}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialMUXTopNavigationViewItemExpandChevronMargin}" Background="Transparent">
                <TextBlock Foreground="{ThemeResource MaterialMUXNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialMUXNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialMUXNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                  <TextBlock.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                  </TextBlock.RenderTransform>
                </TextBlock>
              </Grid>
            </Grid>
            <Grid x:Name="SelectionIndicatorGrid" Margin="16,0,16,4" VerticalAlignment="Bottom">
              <Rectangle x:Name="SelectionIndicator" Height="2" Fill="{ThemeResource MaterialMUXNavigationViewSelectionIndicatorForeground}" Opacity="0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialMUXNavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus">
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXTopNavigationViewItemRevealBackgroundFocused}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemRevealIconForegroundFocused}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemRevealContentForegroundFocused}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="LayoutRoot.MinWidth" Value="48" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="4,0" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemIconOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemContentOnlyContentPresenterMargin}" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="12,0" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemContentOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource MaterialMUXTopNavigationViewItemContentPresenterMargin}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialMUXNavigationViewItemExpandChevronMargin}" Background="Transparent">
                <TextBlock Foreground="{ThemeResource MaterialMUXNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialMUXNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialMUXNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                  <TextBlock.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                  </TextBlock.RenderTransform>
                </TextBlock>
              </Grid>
            </Grid>
            <Grid x:Name="SelectionIndicatorGrid" Margin="16,0,16,4" VerticalAlignment="Bottom">
              <Rectangle x:Name="SelectionIndicator" Height="2" Fill="{ThemeResource MaterialMUXNavigationViewSelectionIndicatorForeground}" Opacity="0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialMUXNavigationViewItemPresenterStyleWhenOnTopPaneOverflow">
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Height="40" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialMUXTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly" />
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemOnOverflowNoIconContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="PresenterContentRootGrid">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource MaterialMUXNavigationViewSelectionIndicatorForeground}" Opacity="0.0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid x:Name="ContentGrid">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                  <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource MaterialMUXTopNavigationViewItemOnOverflowContentPresenterMargin}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialMUXTopNavigationViewItemOnOverflowExpandChevronMargin}" Padding="{ThemeResource MaterialMUXTopNavigationViewItemOnOverflowExpandChevronPadding}" Background="Transparent">
                  <TextBlock Foreground="{ThemeResource MaterialMUXNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialMUXNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialMUXNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMUXNavigationViewItemStyle" TargetType="controls:NavigationViewItem">
    <Setter Property="Foreground" Value="{ThemeResource MaterialMUXNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource MaterialMUXNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialMUXNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialMUXNavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Margin" Value="{ThemeResource MaterialMUXNavigationViewItemMargin}" />
    <Setter Property="Padding" Value="{ThemeResource MaterialMUXNavigationViewItemPadding}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="TabNavigation" Value="Once" />
    <contract7Present:Setter Property="CornerRadius" Value="{ThemeResource MaterialMUXNavigationViewItemCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="NVIRootGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ItemOnNavigationViewListPositionStates">
                <VisualState x:Name="OnLeftNavigation">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialMUXNavigationViewItemPresenterStyleWhenOnLeftPane}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnLeftNavigationReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialMUXNavigationViewItemPresenterStyleWhenOnLeftPaneWithRevealFocus}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimary">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialMUXNavigationViewItemPresenterStyleWhenOnTopPane}" />
                    <contract7NotPresent:Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                    <contract7Present:Setter Target="ChildrenFlyout.Placement" Value="BottomEdgeAlignedLeft" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimaryReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource MaterialMUXTopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialMUXNavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus}" />
                    <contract7NotPresent:Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                    <contract7Present:Setter Target="ChildrenFlyout.Placement" Value="BottomEdgeAlignedLeft" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationOverflow">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialMUXNavigationViewItemPresenterStyleWhenOnTopPaneOverflow}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- on uwp: primitiveContract7Present:CornerRadius is to be expected, using contract7Present wont work. on uno, it is the opposite... -->
            <!-- opting to drop the conditional xmlns as it will be true anyways -->
            <primitives:NavigationViewItemPresenter x:Name="NavigationViewItemPresenter" Icon="{TemplateBinding Icon}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" CornerRadius="{TemplateBinding CornerRadius}" IsTabStop="false" Control.IsTemplateFocusTarget="True" />
            <controls:ItemsRepeater Grid.Row="1" Visibility="Collapsed" x:Name="NavigationViewItemMenuItemsHost">
              <controls:ItemsRepeater.Layout>
                <controls:StackLayout Orientation="Vertical" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
            <FlyoutBase.AttachedFlyout>
              <Flyout x:Name="ChildrenFlyout" contract7NotPresent:Placement="Right" contract7Present:Placement="RightEdgeAlignedTop">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="{ThemeResource MaterialMUXNavigationViewItemChildrenMenuFlyoutPadding}" />
                    <!-- Set negative top margin to make the flyout align exactly with the button -->
                    <Setter Property="Margin" Value="0,-4,0,0" />
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                    <contract7Present:Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ScrollViewer x:Name="ScrollViewer" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" AutomationProperties.AccessibilityView="Raw">
                            <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource OverlayCornerRadius}" />
                          </ScrollViewer>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <Grid x:Name="FlyoutRootGrid">
                  <Grid x:Name="FlyoutContentGrid" />
                </Grid>
              </Flyout>
            </FlyoutBase.AttachedFlyout>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialNavigationViewStyle" TargetType="controls:NavigationView" BasedOn="{StaticResource MaterialMUXNavigationViewStyle}" />
  <Style x:Key="MaterialNavigationViewItemStyle" TargetType="controls:NavigationViewItem" BasedOn="{StaticResource MaterialMUXNavigationViewItemStyle}" />
  <!--origin: Styles\Controls\v1\NavigationView\WUX\NavigationView.xaml-->
  <x:Double x:Key="MaterialWUXNavDrawersFontSize">14</x:Double>
  <x:Int32 x:Key="MaterialWUXNavDrawersElevation">16</x:Int32>
  <IsNotWinUI3:Style x:Key="MaterialWUXNavigationViewStyle" TargetType="NavigationView">
    <Setter Property="PaneToggleButtonStyle" Value="{StaticResource PaneToggleButtonStyle}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CompactPaneLength" Value="52" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="NavigationView">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeGroup">
                <VisualState x:Name="Compact">
                  <android:VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="52,5,0,0" />
                  </android:VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Expanded">
                  <VisualState.Setters>
                    <Setter Target="TopNavGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Minimal">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="52,5,0,0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="MinimalWithBackButton">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="104,5,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TogglePaneGroup">
                <VisualState x:Name="TogglePaneButtonVisible" />
                <VisualState x:Name="TogglePaneButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGridToggleButtonRow.Height" Value="4" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderGroup">
                <VisualState x:Name="HeaderVisible" />
                <VisualState x:Name="HeaderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SettingsGroup">
                <VisualState x:Name="SettingsVisible" />
                <VisualState x:Name="SettingsCollapsed">
                  <VisualState.Setters>
                    <Setter Target="SettingsNavPaneItem.Visibility" Value="Collapsed" />
                    <Setter Target="SettingsTopNavPaneItem.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AutoSuggestGroup">
                <VisualState x:Name="AutoSuggestBoxVisible" />
                <VisualState x:Name="AutoSuggestBoxCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AutoSuggestArea.Visibility" Value="Collapsed" />
                    <Setter Target="TopPaneAutoSuggestArea.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateGroup">
                <VisualState x:Name="NotClosedCompact" />
                <VisualState x:Name="ClosedCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneAutoSuggestBoxPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateListSizeGroup">
                <VisualState x:Name="ListSizeFull" />
                <VisualState x:Name="ListSizeCompact">
                  <VisualState.Setters>
                    <Setter Target="MenuItemsHost.HorizontalAlignment" Value="Left" />
                    <win:Setter Target="MenuItemsHost.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <xamarin:Setter Target="MenuItemsHost.Width" Value="48" />
                    <Setter Target="SettingsNavPaneItem.HorizontalAlignment" Value="Left" />
                    <win:Setter Target="SettingsNavPaneItem.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <xamarin:Setter Target="SettingsNavPaneItem.Width" Value="40" />
                    <Setter Target="PaneTopContent.Visibility" Value="Collapsed" />
                    <Setter Target="PaneHeaderContentBorder.Visibility" Value="Collapsed" />
                    <Setter Target="PaneCustomContentBorder.HorizontalAlignment" Value="Left" />
                    <win:Setter Target="PaneCustomContentBorder.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <xamarin:Setter Target="PaneCustomContentBorder.Width" Value="40" />
                    <Setter Target="FooterContentBorder.HorizontalAlignment" Value="Left" />
                    <win:Setter Target="FooterContentBorder.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <xamarin:Setter Target="FooterContentBorder.Width" Value="40" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBarVisibilityGroup">
                <VisualState x:Name="TitleBarVisible" />
                <VisualState x:Name="TitleBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Margin" Value="0,32,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="OverflowLabelGroup">
                <VisualState x:Name="OverflowButtonWithLabel" />
                <VisualState x:Name="OverflowButtonNoLabel">
                  <VisualState.Setters>
                    <Setter Target="TopNavOverflowButton.Style" Value="{ThemeResource NavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BackButtonGroup">
                <VisualState x:Name="BackButtonVisible" />
                <VisualState x:Name="BackButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="BackButtonPlaceholderOnTopNav.Width" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <StackPanel x:Name="TopNavArea" Background="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Canvas.ZIndex="1">
                <Grid x:Name="TopNavTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}" />
                <Grid x:Name="TopNavGrid" Height="{ThemeResource NavigationViewTopPaneHeight}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="BackButtonPlaceholderOnTopNav" Width="{ThemeResource NavigationBackButtonWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" MinWidth="48" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid x:Name="TopNavLeftPadding" Grid.Column="1" Width="0" />
                  <ContentControl x:Name="PaneHeaderOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                  <!-- Top nav list -->
                  <NavigationViewList AutomationProperties.LandmarkType="Navigation" x:Name="TopNavMenuItemsHost" Grid.Column="3" SelectionMode="Single" IsItemClickEnabled="True" ItemTemplate="{TemplateBinding MenuItemTemplate}" ItemTemplateSelector="{TemplateBinding MenuItemTemplateSelector}" ItemContainerStyle="{TemplateBinding MenuItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding MenuItemContainerStyleSelector}" ScrollViewer.HorizontalScrollMode="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollMode="Disabled" ScrollViewer.VerticalScrollBarVisibility="Hidden" SingleSelectionFollowsFocus="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SingleSelectionFollowsFocus}">
                    <ListView.ItemsPanel>
                      <ItemsPanelTemplate>
                        <ItemsStackPanel Orientation="Horizontal" />
                      </ItemsPanelTemplate>
                    </ListView.ItemsPanel>
                    <ListView.ItemContainerTransitions>
                      <TransitionCollection />
                    </ListView.ItemContainerTransitions>
                  </NavigationViewList>
                  <Button x:Name="TopNavOverflowButton" Grid.Column="4" Content="More" Style="{StaticResource NavigationViewOverflowButtonStyleWhenPaneOnTop}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.OverflowButtonVisibility}">
                    <Button.Flyout>
                      <Flyout Placement="Bottom">
                        <Flyout.FlyoutPresenterStyle>
                          <Style TargetType="FlyoutPresenter">
                            <Setter Property="Padding" Value="0,8" />
                            <!-- Set negative top margin to make the flyout align exactly with the button -->
                            <Setter Property="Margin" Value="0,-4,0,0" />
                          </Style>
                        </Flyout.FlyoutPresenterStyle>
                        <NavigationViewList x:Name="TopNavMenuItemsOverflowHost" ItemTemplate="{TemplateBinding MenuItemTemplate}" ItemTemplateSelector="{TemplateBinding MenuItemTemplateSelector}" ItemContainerStyle="{TemplateBinding MenuItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding MenuItemContainerStyleSelector}" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" SingleSelectionFollowsFocus="False" IsItemClickEnabled="True">
                          <ListView.ItemContainerTransitions>
                            <TransitionCollection />
                          </ListView.ItemContainerTransitions>
                        </NavigationViewList>
                      </Flyout>
                    </Button.Flyout>
                  </Button>
                  <ContentControl x:Name="PaneCustomContentOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="5" />
                  <Grid x:Name="TopPaneAutoSuggestArea" Height="{ThemeResource NavigationViewTopPaneHeight}" Grid.Column="6">
                    <ContentControl x:Name="TopPaneAutoSuggestBoxPresenter" Margin="12,0,12,0" MinWidth="48" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                  </Grid>
                  <ContentControl x:Name="PaneFooterOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="7" />
                  <NavigationViewItem x:Name="SettingsTopNavPaneItem" Style="{ThemeResource MaterialWUXNavigationViewSettingsItemStyleWhenOnTopPane}" Grid.Column="8" Icon="Setting" />
                </Grid>
                <Border x:Name="TopNavContentOverlayAreaGrid" Child="{TemplateBinding ContentOverlay}" />
              </StackPanel>
              <SplitView x:Name="RootSplitView" xamarin:Style="{StaticResource DrawerSplitViewStyle}" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" DisplayMode="Inline" IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}" IsTabStop="False" OpenPaneLength="{TemplateBinding OpenPaneLength}" PaneBackground="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" Grid.Row="1">
                <!-- Known Issue ElevatedView creates abnormal and unwanted behavior inside splitview pane -->
                <SplitView.Pane>
                  <Grid x:Name="PaneContentGrid" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="0" />
                      <!-- above button margin + back button space -->
                      <RowDefinition x:Name="PaneContentGridToggleButtonRow" Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="8" />
                      <!-- above list margin -->
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="ContentPaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
                    <Grid x:Name="PaneToggleButton_GridRow" Grid.Row="2" Height="{StaticResource PaneToggleButtonHeight}" />
                    <Grid x:Name="PaneTopContent" Grid.Row="3">
                      <ContentControl x:Name="PaneHeaderContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="1" />
                    </Grid>
                    <Grid x:Name="AutoSuggestArea" Grid.Row="4" Height="{ThemeResource NavigationViewTopPaneHeight}" VerticalAlignment="Center">
                      <ContentControl x:Name="PaneAutoSuggestBoxPresenter" Margin="{ThemeResource NavigationViewAutoSuggestBoxMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                      <Button x:Name="PaneAutoSuggestButton" Visibility="Collapsed" Style="{ThemeResource NavigationViewPaneSearchButtonStyle}" Width="{TemplateBinding CompactPaneLength}" />
                    </Grid>
                    <ContentControl x:Name="PaneCustomContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="5" />
                    <!-- Left nav list -->
                    <NavigationViewList x:Name="MenuItemsHost" Grid.Row="7" SelectionMode="Single" IsItemClickEnabled="True" HorizontalAlignment="Stretch" SelectedItem="{TemplateBinding SelectedItem}" ItemTemplate="{TemplateBinding MenuItemTemplate}" ItemTemplateSelector="{TemplateBinding MenuItemTemplateSelector}" ItemContainerStyle="{TemplateBinding MenuItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding MenuItemContainerStyleSelector}" SingleSelectionFollowsFocus="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SingleSelectionFollowsFocus}" />
                    <ContentControl x:Name="FooterContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="8" />
                    <NavigationViewItem x:Name="SettingsNavPaneItem" Grid.Row="9" Icon="Setting" />
                  </Grid>
                </SplitView.Pane>
                <SplitView.Content>
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <ContentControl x:Name="HeaderContent" MinHeight="{StaticResource PaneToggleButtonHeight}" IsTabStop="False" Margin="4,4,0,0" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource NavigationViewTitleHeaderContentControlTextStyle}" />
                    <ContentPresenter AutomationProperties.LandmarkType="Main" Grid.Row="1" Padding="0" Content="{TemplateBinding Content}" />
                  </Grid>
                </SplitView.Content>
              </SplitView>
            </Grid>
            <!--
							Notes:
							- InternalVisibleBoundsPadding is added to this control to make this template compatible
							  with notched devices by default. This behavior is not present in Microsoft's default UWP default.

							- Canvas.ZIndex is not supported in Uno Grid yet, see https://github.com/unoplatform/uno/issues/325
						-->
            <Grid x:Name="PaneToggleButtonGrid" Margin="0,0,0,8" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.ZIndex="100">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="TogglePaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
              <Grid x:Name="ButtonHolderGrid" Grid.Row="1">
                <Button x:Name="NavigationViewBackButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}" IsEnabled="{TemplateBinding IsBackEnabled}" />
                <Button x:Name="TogglePaneButton" Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Converter={StaticResource OpenToPaneButtonStyle}}" AutomationProperties.LandmarkType="Navigation" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}" Background="Transparent" VerticalAlignment="Top" HorizontalAlignment="Left" />
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <IsNotWinUI3:Style x:Key="MaterialWUXNoCompactMenuNavigationViewStyle" BasedOn="{StaticResource MaterialWUXNavigationViewStyle}" TargetType="NavigationView">
    <Setter Property="CompactPaneLength" Value="0" />
    <Setter Property="ExpandedModeThresholdWidth" Value="600" />
    <Setter Property="CompactModeThresholdWidth" Value="100000" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="NavigationView">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeGroup">
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Expanded">
                  <VisualState.Setters>
                    <Setter Target="TopNavGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Minimal">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="52,5,0,0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="MinimalWithBackButton">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="104,5,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TogglePaneGroup">
                <VisualState x:Name="TogglePaneButtonVisible" />
                <VisualState x:Name="TogglePaneButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGridToggleButtonRow.Height" Value="4" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderGroup">
                <VisualState x:Name="HeaderVisible" />
                <VisualState x:Name="HeaderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SettingsGroup">
                <VisualState x:Name="SettingsVisible" />
                <VisualState x:Name="SettingsCollapsed">
                  <VisualState.Setters>
                    <Setter Target="SettingsNavPaneItem.Visibility" Value="Collapsed" />
                    <Setter Target="SettingsTopNavPaneItem.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AutoSuggestGroup">
                <VisualState x:Name="AutoSuggestBoxVisible" />
                <VisualState x:Name="AutoSuggestBoxCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AutoSuggestArea.Visibility" Value="Collapsed" />
                    <Setter Target="TopPaneAutoSuggestArea.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateGroup">
                <VisualState x:Name="NotClosedCompact" />
                <VisualState x:Name="ClosedCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneAutoSuggestBoxPresenter.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateListSizeGroup">
                <VisualState x:Name="ListSizeFull" />
                <!-- Display the list as empty instead of compact -->
                <VisualState x:Name="ListSizeCompact">
                  <VisualState.Setters>
                    <Setter Target="MenuItemsHost.Width" Value="0" />
                    <Setter Target="SettingsNavPaneItem.Width" Value="0" />
                    <Setter Target="PaneTopContent.Visibility" Value="Collapsed" />
                    <Setter Target="PaneHeaderContentBorder.Visibility" Value="Collapsed" />
                    <Setter Target="PaneCustomContentBorder.HorizontalAlignment" Value="Left" />
                    <Setter Target="PaneCustomContentBorder.Width" Value="0" />
                    <Setter Target="FooterContentBorder.Width" Value="0" />
                    <Setter Target="ListSizeCompactPadding.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBarVisibilityGroup">
                <VisualState x:Name="TitleBarVisible" />
                <VisualState x:Name="TitleBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Margin" Value="0,32,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="OverflowLabelGroup">
                <VisualState x:Name="OverflowButtonWithLabel" />
                <VisualState x:Name="OverflowButtonNoLabel">
                  <VisualState.Setters>
                    <Setter Target="TopNavOverflowButton.Style" Value="{ThemeResource NavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BackButtonGroup">
                <VisualState x:Name="BackButtonVisible" />
                <VisualState x:Name="BackButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="BackButtonPlaceholderOnTopNav.Width" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <StackPanel x:Name="TopNavArea" Background="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Canvas.ZIndex="1">
                <Grid x:Name="TopNavTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}" />
                <Grid x:Name="TopNavGrid" Height="{ThemeResource NavigationViewTopPaneHeight}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="BackButtonPlaceholderOnTopNav" Width="{ThemeResource NavigationBackButtonWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" MinWidth="48" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid x:Name="TopNavLeftPadding" Grid.Column="1" Width="0" />
                  <ContentControl x:Name="PaneHeaderOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                  <!-- Top nav list -->
                  <NavigationViewList AutomationProperties.LandmarkType="Navigation" x:Name="TopNavMenuItemsHost" Grid.Column="3" SelectionMode="Single" IsItemClickEnabled="True" ItemTemplate="{TemplateBinding MenuItemTemplate}" ItemTemplateSelector="{TemplateBinding MenuItemTemplateSelector}" ItemContainerStyle="{TemplateBinding MenuItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding MenuItemContainerStyleSelector}" ScrollViewer.HorizontalScrollMode="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollMode="Disabled" ScrollViewer.VerticalScrollBarVisibility="Hidden" SingleSelectionFollowsFocus="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SingleSelectionFollowsFocus}">
                    <ListView.ItemsPanel>
                      <ItemsPanelTemplate>
                        <ItemsStackPanel Orientation="Horizontal" />
                      </ItemsPanelTemplate>
                    </ListView.ItemsPanel>
                    <ListView.ItemContainerTransitions>
                      <TransitionCollection />
                    </ListView.ItemContainerTransitions>
                  </NavigationViewList>
                  <Button x:Name="TopNavOverflowButton" Grid.Column="4" Content="More" Style="{StaticResource NavigationViewOverflowButtonStyleWhenPaneOnTop}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.OverflowButtonVisibility}">
                    <Button.Flyout>
                      <Flyout Placement="Bottom">
                        <Flyout.FlyoutPresenterStyle>
                          <Style TargetType="FlyoutPresenter">
                            <Setter Property="Padding" Value="0,8" />
                            <!-- Set negative top margin to make the flyout align exactly with the button -->
                            <Setter Property="Margin" Value="0,-4,0,0" />
                          </Style>
                        </Flyout.FlyoutPresenterStyle>
                        <NavigationViewList x:Name="TopNavMenuItemsOverflowHost" ItemTemplate="{TemplateBinding MenuItemTemplate}" ItemTemplateSelector="{TemplateBinding MenuItemTemplateSelector}" ItemContainerStyle="{TemplateBinding MenuItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding MenuItemContainerStyleSelector}" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" SingleSelectionFollowsFocus="False" IsItemClickEnabled="True">
                          <ListView.ItemContainerTransitions>
                            <TransitionCollection />
                          </ListView.ItemContainerTransitions>
                        </NavigationViewList>
                      </Flyout>
                    </Button.Flyout>
                  </Button>
                  <ContentControl x:Name="PaneCustomContentOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="5" />
                  <Grid x:Name="TopPaneAutoSuggestArea" Height="{ThemeResource NavigationViewTopPaneHeight}" Grid.Column="6">
                    <ContentControl x:Name="TopPaneAutoSuggestBoxPresenter" Margin="12,0,12,0" MinWidth="48" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                  </Grid>
                  <ContentControl x:Name="PaneFooterOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="7" />
                  <NavigationViewItem x:Name="SettingsTopNavPaneItem" Style="{ThemeResource MaterialWUXNavigationViewSettingsItemStyleWhenOnTopPane}" Grid.Column="8" Icon="Setting" />
                </Grid>
                <Border x:Name="TopNavContentOverlayAreaGrid" Child="{TemplateBinding ContentOverlay}" />
              </StackPanel>
              <SplitView x:Name="RootSplitView" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" DisplayMode="Inline" IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}" IsTabStop="False" OpenPaneLength="{TemplateBinding OpenPaneLength}" PaneBackground="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" Grid.Row="1">
                <!-- Known Issue ElevatedView creates abnormal and unwanted behavior inside splitview pane -->
                <SplitView.Pane>
                  <Grid x:Name="PaneContentGrid" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="0" />
                      <!-- above button margin + back button space -->
                      <RowDefinition x:Name="PaneContentGridToggleButtonRow" Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="8" />
                      <!-- above list margin -->
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="ContentPaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
                    <Grid x:Name="PaneToggleButton_GridRow" Grid.Row="2" Height="{StaticResource PaneToggleButtonHeight}" />
                    <Grid x:Name="PaneTopContent" Grid.Row="3">
                      <ContentControl x:Name="PaneHeaderContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="1" />
                    </Grid>
                    <Grid x:Name="AutoSuggestArea" Grid.Row="4" Height="{ThemeResource NavigationViewTopPaneHeight}" VerticalAlignment="Center">
                      <ContentControl x:Name="PaneAutoSuggestBoxPresenter" Margin="{ThemeResource NavigationViewAutoSuggestBoxMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                      <Button x:Name="PaneAutoSuggestButton" Visibility="Collapsed" Style="{ThemeResource NavigationViewPaneSearchButtonStyle}" Width="{TemplateBinding CompactPaneLength}" />
                    </Grid>
                    <ContentControl x:Name="PaneCustomContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="5" />
                    <!-- Left nav list -->
                    <NavigationViewList x:Name="MenuItemsHost" Grid.Row="7" SelectionMode="Single" IsItemClickEnabled="True" HorizontalAlignment="Stretch" SelectedItem="{TemplateBinding SelectedItem}" ItemTemplate="{TemplateBinding MenuItemTemplate}" ItemTemplateSelector="{TemplateBinding MenuItemTemplateSelector}" ItemContainerStyle="{TemplateBinding MenuItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding MenuItemContainerStyleSelector}" SingleSelectionFollowsFocus="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.SingleSelectionFollowsFocus}" />
                    <ContentControl x:Name="FooterContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="8" />
                    <NavigationViewItem x:Name="SettingsNavPaneItem" Grid.Row="9" Icon="Setting" />
                  </Grid>
                </SplitView.Pane>
                <SplitView.Content>
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <!--Padding to compensate for the fact that there is no side panel in ListSizeCompact for this style, so we must
										ensure that the content is not placed behind the ToggleButton-->
                    <Grid x:Name="ListSizeCompactPadding" Height="{StaticResource PaneToggleButtonHeight}" Visibility="Collapsed" />
                    <ContentControl x:Name="HeaderContent" MinHeight="{StaticResource PaneToggleButtonHeight}" IsTabStop="False" Margin="4,4,0,0" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource NavigationViewTitleHeaderContentControlTextStyle}" Grid.Row="1" />
                    <ContentPresenter AutomationProperties.LandmarkType="Main" Grid.Row="2" Padding="0" Content="{TemplateBinding Content}" />
                  </Grid>
                </SplitView.Content>
              </SplitView>
            </Grid>
            <!--
								Notes:
								- InternalVisibleBoundsPadding is added to this control to make this template compatible
								  with notched devices by default. This behavior is not present in Microsoft's default UWP default.

								- Canvas.ZIndex is not supported in Uno Grid yet, see https://github.com/unoplatform/uno/issues/325
						-->
            <Grid x:Name="PaneToggleButtonGrid" Margin="0,0,0,8" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.ZIndex="100">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="TogglePaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
              <Grid x:Name="ButtonHolderGrid" Grid.Row="1">
                <Button x:Name="NavigationViewBackButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}" IsEnabled="{TemplateBinding IsBackEnabled}" />
                <Button x:Name="TogglePaneButton" Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Converter={StaticResource OpenToPaneButtonStyle}}" AutomationProperties.LandmarkType="Navigation" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}" Background="Transparent" VerticalAlignment="Top" />
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <IsNotWinUI3:Style x:Key="MaterialWUXNavigationViewItemStyle" TargetType="NavigationViewItem">
    <Setter Property="Foreground" Value="{StaticResource MaterialWUXNavDrawersTextBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{StaticResource MaterialWUXNavDrawersFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="NavigationViewItem">
          <NavigationViewItemPresenter x:Name="NavigationViewItemPresenter" Icon="{TemplateBinding Icon}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" IsTabStop="False">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ItemOnNavigationViewListPositionStates">
                <VisualState x:Name="OnLeftNavigation">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialWUXNavigationViewItemPresenterStyleWhenOnLeftPane}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnLeftNavigationReveal" />
                <VisualState x:Name="OnTopNavigationPrimary">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource NavigationViewItemPresenterStyleWhenOnTopPane}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimaryReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource NavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationOverflow">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource NavigationViewItemPresenterStyleWhenOnTopPaneOverflow}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </NavigationViewItemPresenter>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <IsNotWinUI3:Style TargetType="NavigationViewItemHeader">
    <Setter Property="IsEnabled" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="NavigationViewItemHeader">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PaneStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="HeaderTextCollapsed" To="HeaderTextVisible">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="HeaderTextVisible" To="HeaderTextCollapsed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Collapsed" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="HeaderTextVisible" />
                <VisualState x:Name="HeaderTextCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderText.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="InnerHeaderGrid" HorizontalAlignment="Left">
              <TextBlock x:Name="HeaderText" VerticalAlignment="Center" Margin="16,8" Opacity="{StaticResource MaterialLowOpacity}" FontSize="16" LineHeight="23" Text="{TemplateBinding Content}" TextWrapping="NoWrap" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <IsNotWinUI3:Style TargetType="NavigationViewItem" x:Key="MaterialWUXNavigationViewSettingsItemStyleWhenOnTopPane">
    <Setter Property="Foreground" Value="{StaticResource MaterialWUXNavDrawersTextBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{StaticResource MaterialWUXNavDrawersFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="NavigationViewItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource TopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource TopNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource TopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource TopNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{StaticResource MaterialWUXNavDrawersSelectedBrush}" />
                    <Setter Target="Icon.Foreground" Value="{StaticResource MaterialWUXNavDrawersSelectedIconBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource TopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource TopNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource TopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource TopNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource TopNavigationViewItemForegroundLow}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="IconRow" Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Viewbox x:Name="IconBox" Grid.Row="1" Grid.Column="1" Height="16" Width="48" Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{ThemeResource TopNavigationViewItemForeground}" />
              </Viewbox>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <IsNotWinUI3:Style TargetType="NavigationViewItemPresenter" x:Key="MaterialWUXNavigationViewItemPresenterStyleWhenOnLeftPane">
    <Setter Property="Foreground" Value="{StaticResource MaterialWUXNavDrawersTextBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Height="48" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{StaticResource MaterialWUXNavDrawersSelectedBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialWUXNavDrawersSelectedTextBrush}" />
                    <Setter Target="Icon.Foreground" Value="{StaticResource MaterialWUXNavDrawersSelectedIconBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                    <Setter Target="LayoutRoot.Background" Value="{StaticResource MaterialWUXNavDrawersSelectedBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialWUXNavDrawersSelectedTextBrush}" />
                    <Setter Target="Icon.Foreground" Value="{StaticResource MaterialWUXNavDrawersSelectedIconBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                    <Setter Target="LayoutRoot.Background" Value="{StaticResource MaterialWUXNavDrawersSelectedBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialWUXNavDrawersSelectedTextBrush}" />
                    <Setter Target="Icon.Foreground" Value="{StaticResource MaterialWUXNavDrawersSelectedIconBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="IconVisible" />
                <VisualState x:Name="IconCollapsed">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="16" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Height="40" HorizontalAlignment="Left" x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="IconColumn" Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" Margin="18,10">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Margin="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
            </Grid>
            <Border x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
            <Border x:Name="PressedOverlay" Background="{StaticResource MaterialOnSurfacePressedBrush}" Opacity="0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <!--origin: Styles\Controls\v1\NavigationView\WUX\NavigationViewItemSeparator.xaml-->
  <IsNotWinUI3:Style TargetType="NavigationViewItemSeparator">
    <Setter Property="IsEnabled" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="NavigationSeparatorLineStates">
                <VisualState x:Name="HorizontalLine" />
                <VisualState x:Name="VerticalLine">
                  <VisualState.Setters>
                    <Setter Target="SeparatorLine.Height" Value="20" />
                    <Setter Target="SeparatorLine.Width" Value="1" />
                    <Setter Target="SeparatorLine.Margin" Value="10,0" />
                    <Setter Target="SeparatorLine.VerticalAlignment" Value="Center" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="Separator" Height="1" Margin="16,10" Fill="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <!--origin: Styles\Controls\v1\NavigationView\WUX\NavigationView_PaneToggleButton.xaml-->
  <x:String x:Key="BackArrowPathData">M8,0 L9.4,1.4 L3.8,7 L16,7 L16,9 L3.8,9 L9.4,14.6 L8,16 L0,8 z</x:String>
  <um:FromOpenToCustomValueConverter x:Name="OpenToPaneButtonStyle" ValueIfOpen="{StaticResource MaterialPaneBackArrowToggleButtonStyle}" ValueIfClosed="{StaticResource MaterialPaneToggleButtonStyle}" />
  <IsNotWinUI3:Style x:Key="MaterialPaneToggleButtonStyle" TargetType="Button">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontFamily" Value="{StaticResource SymbolThemeFontFamily}" />
    <Setter Property="MinHeight" Value="{StaticResource PaneToggleButtonHeight}" />
    <Setter Property="MinWidth" Value="52" />
    <Setter Property="Padding" Value="2" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialWUXNavDrawersTextBrush}" />
    <Setter Property="Content" Value="&#xE700;" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Height="{TemplateBinding MinHeight}" Width="{TemplateBinding MinWidth}" Margin="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <!-- Workaround for #92 - Android PointerOver state is being applied and maintained on click -->
                  <not_android:Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" BeginTime="{StaticResource MaterialDelayedBeginTime}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </not_android:Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundChecked}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPointerOver}" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Width="{TemplateBinding MinWidth}" HorizontalAlignment="Left">
              <Viewbox x:Name="IconHost" Width="20" Height="20" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
                <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" AutomationProperties.AccessibilityView="Raw" />
              </Viewbox>
            </Grid>
            <Border x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Width="{TemplateBinding MinWidth}" HorizontalAlignment="Left" android:Visibility="Collapsed" Opacity="0" />
            <Border x:Name="PressedOverlay" Background="{StaticResource MaterialOnSurfacePressedBrush}" Width="{TemplateBinding MinWidth}" HorizontalAlignment="Left" Opacity="0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <IsNotWinUI3:Style x:Key="MaterialPaneBackArrowToggleButtonStyle" TargetType="Button">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontFamily" Value="{StaticResource SymbolThemeFontFamily}" />
    <Setter Property="MinHeight" Value="{StaticResource PaneToggleButtonHeight}" />
    <Setter Property="MinWidth" Value="52" />
    <Setter Property="Padding" Value="2" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{StaticResource MaterialWUXNavDrawersBackgroundBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialWUXNavDrawersTextBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="LayoutRoot" Height="{TemplateBinding MinHeight}" Width="{TemplateBinding MinWidth}" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <!-- Workaround for #92 - Android PointerOver state is being applied and maintained on click -->
                    <not_android:Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundChecked}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPointerOver}" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Width="{TemplateBinding MinWidth}" HorizontalAlignment="Left">
              <Viewbox x:Name="IconHost" Width="20" Height="20" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
                <Grid>
                  <Path Data="{StaticResource BackArrowPathData}" Fill="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" Stretch="Uniform" Height="20" UseLayoutRounding="False" />
                </Grid>
              </Viewbox>
            </Grid>
            <Border x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Width="{TemplateBinding MinWidth}" HorizontalAlignment="Left" Opacity="0" />
            <Border x:Name="PressedOverlay" Background="{StaticResource MaterialOnSurfacePressedBrush}" Width="{TemplateBinding MinWidth}" HorizontalAlignment="Left" Opacity="0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </IsNotWinUI3:Style>
  <!--origin: Styles\Controls\v1\NavigationView\WUX\NavigationView_SplitView.xaml-->
  <SolidColorBrush x:Key="DrawerSplitViewDismissBackgroundBrush" Color="Black" Opacity="0.5" />
  <ios:Style x:Key="DrawerSplitViewStyle" TargetType="SplitView">
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="OpenPaneLength" Value="{ThemeResource SplitViewOpenPaneThemeLength}" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource SplitViewCompactPaneThemeLength}" />
    <Setter Property="PaneBackground" Value="{ThemeResource SystemControlPageBackgroundChromeLowBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate x:Key="DefaultSplitViewTemplate" TargetType="SplitView">
          <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Closed" To="OpenOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.25" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Closed" To="OpenOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.10" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactLeft" To="OpenCompactOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactRight" To="OpenCompactOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayLeft" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="0" To="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.20" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayRight" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.12" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayLeft" To="ClosedCompactLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayRight" To="ClosedCompactRight">
                    <Storyboard>
                      <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.RightClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </xamarin:ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Closed" />
                <VisualState x:Name="ClosedCompactLeft">
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.LeftClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ClosedCompactRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="2" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <ColumnDefinition x:Name="ColumnDefinition2" Width="*" />
            </Grid.ColumnDefinitions>
            <!--Content Area-->
            <Grid x:Name="ContentRoot" Grid.ColumnSpan="2">
              <Border Child="{TemplateBinding Content}" />
              <xamarin:Button x:Name="LightDismissLayer" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Button.Template>
                  <ControlTemplate>
                    <Border Background="{StaticResource DrawerSplitViewDismissBackgroundBrush}" />
                  </ControlTemplate>
                </Button.Template>
              </xamarin:Button>
            </Grid>
            <!--Pane Content Area-->
            <Grid x:Name="PaneRoot" Grid.ColumnSpan="2" HorizontalAlignment="Left" Visibility="Collapsed" Background="{TemplateBinding PaneBackground}" Width="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <Grid.RenderTransform>
                <CompositeTransform x:Name="PaneTransform" />
              </Grid.RenderTransform>
              <Border Child="{TemplateBinding Pane}" />
              <Rectangle x:Name="HCPaneBorder" Visibility="Collapsed" Fill="{ThemeResource SystemControlForegroundTransparentBrush}" x:DeferLoadStrategy="Lazy" Width="1" HorizontalAlignment="Right" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ios:Style>
  <android:Style x:Key="DrawerSplitViewStyle" TargetType="SplitView">
    <Setter Property="OpenPaneLength" Value="{StaticResource NativeDefaultSplitViewOpenPaneLength}" />
    <Setter Property="PaneBackground" Value="White" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="SplitView">
          <BindableDrawerLayout LeftPaneOpenLength="{TemplateBinding OpenPaneLength}" LeftPane="{TemplateBinding Pane}" LeftPaneBackground="{TemplateBinding PaneBackground}" IsLeftPaneOpen="{TemplateBinding IsPaneOpen, Mode=TwoWay}" IsLeftPaneEnabled="{Binding (toolkit:SplitViewExtensions.IsPaneEnabled), RelativeSource={RelativeSource TemplatedParent}}" Content="{TemplateBinding Content}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </android:Style>
  <!--origin: Styles\Controls\v1\PasswordBox.xaml-->
  <x:String x:Key="RevealGlyphPathData">M16,5.5999984C17.699951,5.5999984 19.099976,6.9999918 19.099976,8.6999893 19.099976,10.400001 17.699951,11.799994 16,11.799994 14.299988,11.799994 12.899963,10.400001 12.899963,8.6999893 12.899963,6.9999918 14.299988,5.5999984 16,5.5999984z M16,2.1999893C12.399963,2.1999893 9.5,5.0999984 9.5,8.6999893 9.5,12.299994 12.399963,15.199988 16,15.199988 19.599976,15.199988 22.5,12.299994 22.5,8.6999893 22.5,5.0999984 19.599976,2.1999893 16,2.1999893z M16,0C24.799988,5.2249334E-08 32,8.6999893 32,8.6999893 32,8.6999893 24.799988,17.400001 16,17.400001 7.1999512,17.400001 0,8.6999893 0,8.6999893 0,8.6999893 7.1999512,5.2249334E-08 16,0z</x:String>
  <Style x:Name="RevealButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="ButtonLayoutGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ButtonLayoutGrid.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="GlyphElement" Data="{StaticResource RevealGlyphPathData}" Fill="{StaticResource TextBoxIconColorBrush}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="18" AutomationProperties.AccessibilityView="Raw" ios:Margin="0,2,0,0" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledPasswordBoxStyle" TargetType="PasswordBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource TextBoxLabelDefaultColorBrush}" />
    <Setter Property="Background" Value="{StaticResource TextBoxFilledBackgroundColorBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource TextBoxFilledIndicatorColorBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="12,4,8,4" />
    <Setter Property="MinHeight" Value="50" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource TextBoxLabelFocusColorBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Scale" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="1" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="RevealButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Transform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="5" />
                    <DoubleAnimation Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="34" MaxWidth="34" MinWidth="25" Margin="0,0,8,0" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              <ScrollViewer x:Name="ContentElement" Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" ZoomMode="Disabled">
                <ScrollViewer.RenderTransform>
                  <CompositeTransform x:Name="ContentTransform" />
                </ScrollViewer.RenderTransform>
              </ScrollViewer>
              <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{StaticResource TextBoxLabelDefaultColorBrush}" Text="{TemplateBinding PlaceholderText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5">
                <TextBlock.RenderTransform>
                  <CompositeTransform x:Name="Transform" />
                </TextBlock.RenderTransform>
              </TextBlock>
              <Button x:Name="RevealButton" Grid.Column="2" Style="{StaticResource RevealButtonStyle}" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" MinHeight="34" MinWidth="34" VerticalAlignment="Stretch" />
            </Grid>
            <Rectangle x:Name="NormalBorder" Height="{StaticResource TextBoxOutlinedStrokeWidth}" VerticalAlignment="Bottom" Grid.ColumnSpan="3" Fill="{StaticResource TextBoxOutlinedStrokeColorBrush}" />
            <Rectangle x:Name="FocusedBorder" Height="{StaticResource TextBoxFocusStrokeWidth}" VerticalAlignment="Bottom" Grid.ColumnSpan="3" Fill="{StaticResource TextBoxOutlinedFocusStrokeColorBrush}" not_macos:RenderTransformOrigin="0.5,0.5" macos:RenderTransformOrigin="0.0,0.5">
              <Rectangle.RenderTransform>
                <ScaleTransform x:Name="Scale" ScaleX="0" />
              </Rectangle.RenderTransform>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedPasswordBoxStyle" TargetType="PasswordBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource TextBoxLabelDefaultColorBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource TextBoxFilledIndicatorColorBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="12,4,8,4" />
    <Setter Property="MinHeight" Value="50" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource TextBoxFilledFocusIndicatorColorBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource TextBoxLabelFocusColorBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="RevealButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Transform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <DoubleAnimation Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="5" />
                    <DoubleAnimation Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="34" MaxWidth="34" MinWidth="25" Margin="0,0,8,0" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
            <ScrollViewer x:Name="ContentElement" Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" ZoomMode="Disabled">
              <ScrollViewer.RenderTransform>
                <CompositeTransform x:Name="ContentTransform" />
              </ScrollViewer.RenderTransform>
            </ScrollViewer>
            <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{StaticResource TextBoxLabelDefaultColorBrush}" Text="{TemplateBinding PlaceholderText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5">
              <TextBlock.RenderTransform>
                <CompositeTransform x:Name="Transform" />
              </TextBlock.RenderTransform>
            </TextBlock>
            <Button x:Name="RevealButton" Grid.Column="2" Style="{StaticResource RevealButtonStyle}" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" MinHeight="34" MinWidth="34" VerticalAlignment="Stretch" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\ProgressBar.xaml-->
  <Style x:Key="MaterialProgressBarStyle" TargetType="controls:ProgressBar">
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryLowBrush}" />
    <Setter Property="Width" Value="250" />
  </Style>
  <Style x:Key="MaterialSecondaryProgressBarStyle" TargetType="controls:ProgressBar">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryLowBrush}" />
    <Setter Property="Width" Value="250" />
  </Style>
  <!--origin: Styles\Controls\v1\ProgressRing.xaml-->
  <lottie_win:LottieVisualSource x:Key="MaterialDeterminateAnimation_Win" UriSource="ms-appx:///Uno.Material/Assets/MaterialDeterminate.json" />
  <lottie_win:LottieVisualSource x:Key="MaterialIndeterminateAnimation_Win" UriSource="ms-appx:///Uno.Material/Assets/MaterialIndeterminate.json" />
  <lottie_not_win:LottieVisualSource x:Key="MaterialDeterminateAnimation_Uno" UriSource="embedded://Uno.Material/Uno.Material.Assets.MaterialDeterminate.json" />
  <lottie_not_win:LottieVisualSource x:Key="MaterialIndeterminateAnimation_Uno" UriSource="embedded://Uno.Material/Uno.Material.Assets.MaterialIndeterminate.json" />
  <Style x:Key="MaterialProgressRingStyle" TargetType="controls:ProgressRing">
    <win:Setter Property="DeterminateSource" Value="{StaticResource MaterialDeterminateAnimation_Win}" />
    <win:Setter Property="IndeterminateSource" Value="{StaticResource MaterialIndeterminateAnimation_Win}" />
    <not_win:Setter Property="DeterminateSource" Value="{StaticResource MaterialDeterminateAnimation_Uno}" />
    <not_win:Setter Property="IndeterminateSource" Value="{StaticResource MaterialIndeterminateAnimation_Uno}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryLowBrush}" />
  </Style>
  <Style x:Key="MaterialSecondaryProgressRingStyle" TargetType="controls:ProgressRing">
    <win:Setter Property="DeterminateSource" Value="{StaticResource MaterialDeterminateAnimation_Win}" />
    <win:Setter Property="IndeterminateSource" Value="{StaticResource MaterialIndeterminateAnimation_Win}" />
    <not_win:Setter Property="DeterminateSource" Value="{StaticResource MaterialDeterminateAnimation_Uno}" />
    <not_win:Setter Property="IndeterminateSource" Value="{StaticResource MaterialIndeterminateAnimation_Uno}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryLowBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\RadioButton.xaml-->
  <GridLength x:Key="RadioCheckAreaLength">40</GridLength>
  <x:Double x:Key="RadioFocusAreaSize">40</x:Double>
  <x:Double x:Key="RadioCheckAreaSize">18</x:Double>
  <x:Double x:Key="RadioBorderThickness">2</x:Double>
  <StaticResource x:Key="MaterialRadioButtonBorderBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <Style x:Key="MaterialRadioButtonStyle" TargetType="RadioButton">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialOnBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialRadioButtonBorderBrush}" />
    <Setter Property="Padding" Value="8,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="MinHeight" Value="{StaticResource RadioCheckAreaSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Grid x:Name="RootGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="{StaticResource MaterialMediumOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="Pressed">
                    <Storyboard>
                      <android:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0.5" To="0" />
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="0:0:0.15" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" To="0" />
                      <wasm:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </wasm:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="PointerOver" To="Pressed">
                    <Storyboard>
                      <android:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0.5" To="0" />
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource MaterialLowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource MaterialLowOpacity}" To="0" />
                      <wasm:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </wasm:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckEllipse.Opacity" Value="1" />
                    <Setter Target="OuterEllipse_Checked.Opacity" Value="1" />
                    <Setter Target="OuterEllipse_Unchecked.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusRing.Opacity" Value="{StaticResource MaterialFocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="{StaticResource RadioCheckAreaLength}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Ellipse x:Name="FocusRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource RadioFocusAreaSize}" Height="{StaticResource RadioFocusAreaSize}" Fill="{TemplateBinding Background}" IsHitTestVisible="False" StrokeThickness="0" Opacity="0" />
            <Ellipse x:Name="PressRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource RadioFocusAreaSize}" Height="{StaticResource RadioFocusAreaSize}" Fill="{StaticResource MaterialOnSurfaceLowBrush}" IsHitTestVisible="False" Opacity="0" />
            <Grid Height="{StaticResource RadioCheckAreaSize}" Width="{StaticResource RadioCheckAreaSize}">
              <Ellipse x:Name="OuterEllipse_Checked" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Uniform" UseLayoutRounding="False" Stroke="{TemplateBinding Background}" StrokeThickness="{StaticResource RadioBorderThickness}" Opacity="0" />
              <Ellipse x:Name="OuterEllipse_Unchecked" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Uniform" UseLayoutRounding="False" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{StaticResource RadioBorderThickness}" />
              <Ellipse x:Name="CheckEllipse" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Uniform" UseLayoutRounding="False" Fill="{TemplateBinding Background}" Opacity="0" StrokeThickness="0" Margin="5" />
            </Grid>
            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" TextWrapping="Wrap" Grid.Column="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryRadioButtonStyle" TargetType="RadioButton" BasedOn="{StaticResource MaterialRadioButtonStyle}">
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\RatingControl.xaml-->
  <Style x:Key="MaterialRatingControlStyle" TargetType="controls:RatingControl">
    <Setter Property="Height" Value="32" />
    <!--  9794813: retire these two properties as customisation points once all resource keys available  -->
    <Setter Property="Foreground" Value="{ThemeResource MaterialPrimaryBrush}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <not_win:Setter Property="ItemInfo" Value="{ThemeResource MUX_RatingControlDefaultFontInfo}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RatingControl">
          <Grid x:Name="LayoutRoot">
            <Grid.Resources>
              <StaticResource x:Key="RatingControlSelectedForeground" ResourceKey="MaterialPrimaryBrush" />
              <StaticResource x:Key="RatingControlPointerOverPlaceholderForeground" ResourceKey="MaterialPrimaryBrush" />
              <StaticResource x:Key="RatingControlPointerOverUnselectedForeground" ResourceKey="MaterialPrimaryBrush" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlDisabledSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Placeholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverUnselected">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverUnselectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Set">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSet">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel Grid.Row="0" Margin="-20,-20,-20,-20" Orientation="Horizontal">
              <StackPanel x:Name="RatingBackgroundStackPanel" Margin="20,20,0,20" Background="Transparent" Orientation="Horizontal" />
              <TextBlock x:Name="Caption" Height="32" Margin="4,9,20,0" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" AutomationProperties.Name="RatingCaption" Foreground="{ThemeResource RatingControlCaptionForeground}" FontFamily="{StaticResource MaterialRegularFontFamily}" IsHitTestVisible="False" Style="{ThemeResource MaterialCaption}" Text="{TemplateBinding Caption}" TextLineBounds="TrimToBaseline" />
              <!--  4 = 8 item spacing +4 of magic redline spacing -8 to compensate for scale of the last RatingItem  -->
              <!--
                                NB: The redlines say 8px, but it's really 12 px because:
                                Designer note: The value between the last glyph and first text character is 12px.
                                (There's 4px of whitespace accounted for in the text area in the redline)
                            -->
              <!--  TODO MSFT: 9925444 Fix vertical alignment in all text scenarios  -->
            </StackPanel>
            <ContentPresenter x:Name="ForegroundContentPresenter" Grid.Row="0" IsHitTestVisible="False">
              <!--  Margin is on the StackPanel because ContentPresenter clips differently such that moving the reverse margin up won't work  -->
              <StackPanel Margin="-40,-40,-40,-40" Orientation="Horizontal">
                <StackPanel x:Name="RatingForegroundStackPanel" Margin="40,40,40,40" IsHitTestVisible="False" Orientation="Horizontal" />
              </StackPanel>
            </ContentPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryRatingControlStyle" TargetType="controls:RatingControl" BasedOn="{StaticResource MaterialRatingControlStyle}">
    <Setter Property="Foreground" Value="{ThemeResource MaterialSecondaryBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RatingControl">
          <Grid x:Name="LayoutRoot">
            <Grid.Resources>
              <StaticResource x:Key="RatingControlSelectedForeground" ResourceKey="MaterialSecondaryBrush" />
              <StaticResource x:Key="RatingControlPointerOverPlaceholderForeground" ResourceKey="MaterialSecondaryBrush" />
              <StaticResource x:Key="RatingControlPointerOverUnselectedForeground" ResourceKey="MaterialSecondaryBrush" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlDisabledSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Placeholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverUnselected">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverUnselectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Set">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSet">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel Grid.Row="0" Margin="-20,-20,-20,-20" Orientation="Horizontal">
              <StackPanel x:Name="RatingBackgroundStackPanel" Margin="20,20,0,20" Background="Transparent" Orientation="Horizontal" />
              <TextBlock x:Name="Caption" Height="32" Margin="4,9,20,0" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" AutomationProperties.Name="RatingCaption" Foreground="{ThemeResource RatingControlCaptionForeground}" FontFamily="{StaticResource MaterialRegularFontFamily}" IsHitTestVisible="False" Style="{ThemeResource MaterialCaption}" Text="{TemplateBinding Caption}" TextLineBounds="TrimToBaseline" />
              <!--  4 = 8 item spacing +4 of magic redline spacing -8 to compensate for scale of the last RatingItem  -->
              <!--
                                NB: The redlines say 8px, but it's really 12 px because:
                                Designer note: The value between the last glyph and first text character is 12px.
                                (There's 4px of whitespace accounted for in the text area in the redline)
                            -->
              <!--  TODO MSFT: 9925444 Fix vertical alignment in all text scenarios  -->
            </StackPanel>
            <ContentPresenter x:Name="ForegroundContentPresenter" Grid.Row="0" IsHitTestVisible="False">
              <!--  Margin is on the StackPanel because ContentPresenter clips differently such that moving the reverse margin up won't work  -->
              <StackPanel Margin="-40,-40,-40,-40" Orientation="Horizontal">
                <StackPanel x:Name="RatingForegroundStackPanel" Margin="40,40,40,40" IsHitTestVisible="False" Orientation="Horizontal" />
              </StackPanel>
            </ContentPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\Ripple.xaml-->
  <Style TargetType="um:Ripple">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Feedback" Value="{StaticResource MaterialBackgroundBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="um:Ripple">
          <Grid Background="Transparent" Margin="{TemplateBinding Margin}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <!--Uncomment for hover effect-->
                <!--<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ScaleTransform.ScaleX"
												Value="1" />
										<Setter Target="ScaleTransform.ScaleY"
												Value="1" />
										<Setter Target="ClickEllipse.Opacity"
												Value="0.75" />
									</VisualState.Setters>
								</VisualState>-->
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.225" From="0" To="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSizeMultiplier}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.225" From="0" To="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSizeMultiplier}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseIn" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:0.075" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseIn" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                    </win:DoubleAnimationUsingKeyFrames>
                    <not_win:DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" Duration="0:0:0.075" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </not_win:DoubleAnimation>
                    <not_win:DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" BeginTime="0:0:0.6" From="1" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseOut" />
                      </DoubleAnimation.EasingFunction>
                    </not_win:DoubleAnimation>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <Canvas IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="{TemplateBinding FeedbackOpacity}">
              <Ellipse x:Name="ClickEllipse" Fill="{TemplateBinding Feedback}" Opacity="0" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleX}" Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleY}" RenderTransformOrigin=".5,.5">
                <Ellipse.RenderTransform>
                  <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                </Ellipse.RenderTransform>
              </Ellipse>
            </Canvas>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\Slider.xaml-->
  <SolidColorBrush x:Key="MaterialSliderTrackBrush" Color="{ThemeResource MaterialSliderTrackColor}" />
  <StaticResource x:Key="MaterialSliderTickBarFill" ResourceKey="MaterialOnSecondaryLowBrush" />
  <StaticResource x:Key="MaterialSliderTickBarFillDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
  <StaticResource x:Key="MaterialSliderInlineTickBarFill" ResourceKey="SystemControlBackgroundAltHighBrush" />
  <StaticResource x:Key="MaterialSliderThumbBackgroundDisabled" ResourceKey="SystemControlDisabledChromeDisabledHighBrush" />
  <Style x:Key="MaterialSliderThumbStyle" TargetType="Thumb">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSliderStyle" TargetType="Slider">
    <Setter Property="Background" Value="{StaticResource MaterialSliderTrackBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FontFamily" Value="{StaticResource ContentControlThemeFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource ControlContentThemeFontSize}" />
    <Setter Property="ManipulationMode" Value="None" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualMargin" Value="-7,0,-7,0" />
    <Setter Property="IsFocusEngagementEnabled" Value="True" />
    <not_win:Setter Property="CornerRadius" Value="{StaticResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Slider">
          <Grid Margin="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalDecreaseRect" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalDecreaseRect" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TopTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BottomTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LeftTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RightTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusEngagementStates">
                <VisualState x:Name="FocusDisengaged" />
                <VisualState x:Name="FocusEngagedHorizontal">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SliderContainer" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="True" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="FocusEngagedVertical">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SliderContainer" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="True" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!-- SliderContainer -->
            <Grid x:Name="SliderContainer" Background="Transparent" Control.IsTemplateFocusTarget="True" Grid.Row="1">
              <!-- HorizontalTemplate -->
              <Grid x:Name="HorizontalTemplate" MinHeight="32">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="15" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="15" />
                </Grid.RowDefinitions>
                <!-- HorizontalTrackRect -->
                <Rectangle x:Name="HorizontalTrackRect" Fill="{TemplateBinding Background}" Height="2" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Grid.Row="1" Grid.ColumnSpan="3" />
                <!-- HorizontalDecreaseRect -->
                <Rectangle x:Name="HorizontalDecreaseRect" Fill="{TemplateBinding Foreground}" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Grid.Row="1" />
                <!-- TopTickBar -->
                <TickBar x:Name="TopTickBar" Visibility="Collapsed" Fill="{StaticResource MaterialSliderTickBarFill}" Height="4" VerticalAlignment="Bottom" Margin="0,0,0,4" Grid.ColumnSpan="3" />
                <!-- HorizontalInlineTickBar -->
                <TickBar x:Name="HorizontalInlineTickBar" Visibility="Collapsed" Fill="{StaticResource MaterialSliderInlineTickBarFill}" Height="2" Grid.Row="1" Grid.ColumnSpan="3" />
                <!-- BottomTickBar -->
                <TickBar x:Name="BottomTickBar" Visibility="Collapsed" Fill="{StaticResource MaterialSliderTickBarFill}" Height="4" VerticalAlignment="Top" Margin="0,4,0,0" Grid.Row="2" Grid.ColumnSpan="3" />
                <!-- HorizontalThumb -->
                <Thumb x:Name="HorizontalThumb" Style="{StaticResource MaterialSliderThumbStyle}" Background="{TemplateBinding Foreground}" DataContext="{TemplateBinding Value}" Height="12" Width="12" FocusVisualMargin="-14,-6,-14,-6" AutomationProperties.AccessibilityView="Raw" Grid.Row="0" Grid.RowSpan="3" Grid.Column="1" />
              </Grid>
              <!-- VerticalTemplate -->
              <Grid x:Name="VerticalTemplate" MinWidth="32" Visibility="Collapsed">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="15" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="15" />
                </Grid.ColumnDefinitions>
                <!-- VerticalTrackRect -->
                <Rectangle x:Name="VerticalTrackRect" Fill="{TemplateBinding Background}" Width="2" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Grid.Column="1" Grid.RowSpan="3" />
                <!-- VerticalDecreaseRect -->
                <Rectangle x:Name="VerticalDecreaseRect" Fill="{TemplateBinding Foreground}" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" Grid.Column="1" Grid.Row="2" />
                <!-- LeftTickBar -->
                <TickBar x:Name="LeftTickBar" Visibility="Collapsed" Fill="{StaticResource MaterialSliderTickBarFill}" Width="4" HorizontalAlignment="Right" Margin="0,0,4,0" Grid.RowSpan="3" />
                <!-- VerticalInlineTickBar -->
                <TickBar x:Name="VerticalInlineTickBar" Visibility="Collapsed" Fill="{StaticResource MaterialSliderInlineTickBarFill}" Width="2" Grid.Column="1" Grid.RowSpan="3" />
                <!-- RightTickBar -->
                <TickBar x:Name="RightTickBar" Visibility="Collapsed" Fill="{StaticResource MaterialSliderTickBarFill}" Width="4" HorizontalAlignment="Left" Margin="4,0,0,0" Grid.Column="2" Grid.RowSpan="3" />
                <!-- VerticalThumb -->
                <Thumb x:Name="VerticalThumb" Style="{StaticResource MaterialSliderThumbStyle}" Background="{TemplateBinding Foreground}" DataContext="{TemplateBinding Value}" Width="12" Height="12" FocusVisualMargin="-6,-14,-6,-14" AutomationProperties.AccessibilityView="Raw" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" />
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondarySliderStyle" BasedOn="{StaticResource MaterialSliderStyle}" TargetType="Slider">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v1\TextBlock.xaml-->
  <Style x:Key="MaterialBaseTextBlockStyle" TargetType="TextBlock">
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
  </Style>
  <Style x:Key="MaterialHeadline1" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="96" />
    <Setter Property="FontWeight" Value="Light" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialLightFontFamily}" />
    <Setter Property="CharacterSpacing" Value="-15.625" />
  </Style>
  <Style x:Key="MaterialHeadline2" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="60" />
    <Setter Property="FontWeight" Value="Light" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialLightFontFamily}" />
    <Setter Property="CharacterSpacing" Value="-8.333" />
  </Style>
  <Style x:Key="MaterialHeadline3" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="48" />
  </Style>
  <Style x:Key="MaterialHeadline4" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="34" />
    <Setter Property="CharacterSpacing" Value="7.353" />
  </Style>
  <Style x:Key="MaterialHeadline5" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="24" />
  </Style>
  <Style x:Key="MaterialHeadline6" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="20" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="7.5" />
  </Style>
  <Style x:Key="MaterialSubtitle1" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="CharacterSpacing" Value="9.375" />
  </Style>
  <Style x:Key="MaterialSubtitle2" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="7.143" />
  </Style>
  <Style x:Key="MaterialBody1" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="CharacterSpacing" Value="31.25" />
  </Style>
  <Style x:Key="MaterialBody2" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="CharacterSpacing" Value="17.857" />
  </Style>
  <Style x:Key="MaterialButtonText" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="89.286" />
  </Style>
  <Style x:Key="MaterialCaption" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="12" />
    <Setter Property="CharacterSpacing" Value="33.333" />
  </Style>
  <Style x:Key="MaterialOverline" TargetType="TextBlock" BasedOn="{StaticResource MaterialBaseTextBlockStyle}">
    <Setter Property="FontSize" Value="10" />
    <Setter Property="CharacterSpacing" Value="150" />
  </Style>
  <!--origin: Styles\Controls\v1\TextBox.xaml-->
  <um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformTranslateY" NotNullOrEmptyValue="5" NullOrEmptyValue="0" />
  <x:String x:Key="ClearGlyphPathData">M10.661012,7.5689991L7.5990001,10.650999 12.939089,15.997999 7.5990001,21.336999 10.661012,24.405 16.007082,19.065 21.369997,24.405 24.430058,21.336999 24.429081,21.336 19.088991,15.998999 24.429081,10.662001 21.345095,7.5819996 16.007082,12.919001z M15.997072,0C24.828983,0 31.994999,7.1770013 31.994999,15.999998 31.994999,24.826997 24.828007,31.999999 15.997072,31.999999 7.1569835,31.999999 1.5270052E-07,24.826997 0,15.999998 1.5270052E-07,7.1799997 7.1569835,0 15.997072,0z</x:String>
  <Style x:Name="DeleteButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="ButtonLayoutGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ButtonLayoutGrid.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="GlyphElement" Data="{StaticResource ClearGlyphPathData}" Fill="{StaticResource TextBoxIconColorBrush}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="16" Height="16" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledTextBoxStyle" TargetType="TextBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource TextBoxLabelDefaultColorBrush}" />
    <Setter Property="PlaceholderForeground" Value="{StaticResource TextBoxLabelDefaultColorBrush}" />
    <Setter Property="Background" Value="{StaticResource TextBoxFilledBackgroundColorBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource TextBoxFilledIndicatorColorBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <macos:Setter Property="Padding" Value="12,4" />
    <not_macos:Setter Property="Padding" Value="12,16" />
    <Setter Property="MinHeight" Value="50" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
                    <!-- In this case the opacity is not applied to the brush -->
                    <Setter Target="ContentElement.Opacity" Value="{StaticResource MaterialLowOpacity}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource TextBoxLabelFocusColorBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FocusedBorder_ScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="1" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="DeleteButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
                    <DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Margin="0,0,8,0" MaxHeight="34" MaxWidth="34" MinWidth="25" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              <ScrollViewer x:Name="ContentElement" Grid.Column="1" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}" not_macos:VerticalAlignment="Bottom" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" ZoomMode="Disabled" AutomationProperties.AccessibilityView="Raw">
                <ScrollViewer.RenderTransform>
                  <CompositeTransform x:Name="ContentElement_CompositeTransform" />
                </ScrollViewer.RenderTransform>
              </ScrollViewer>
              <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <TextBlock.RenderTransform>
                  <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
                </TextBlock.RenderTransform>
              </TextBlock>
              <Button x:Name="DeleteButton" Grid.Column="2" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Style="{StaticResource DeleteButtonStyle}" not_macos:VerticalAlignment="Bottom" macos:VerticalAlignment="Stretch" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" />
            </Grid>
            <Rectangle x:Name="NormalBorder" Fill="{StaticResource TextBoxOutlinedStrokeColorBrush}" Height="{StaticResource TextBoxOutlinedStrokeWidth}" VerticalAlignment="Bottom" />
            <Rectangle x:Name="FocusedBorder" Fill="{StaticResource TextBoxOutlinedFocusStrokeColorBrush}" Height="{StaticResource TextBoxFocusStrokeWidth}" VerticalAlignment="Bottom" not_macos:RenderTransformOrigin="0.5,0.5" macos:RenderTransformOrigin="0.0,0.5">
              <Rectangle.RenderTransform>
                <ScaleTransform x:Name="FocusedBorder_ScaleTransform" ScaleX="0" />
              </Rectangle.RenderTransform>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedTextBoxStyle" TargetType="TextBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource TextBoxLabelDefaultColorBrush}" />
    <Setter Property="PlaceholderForeground" Value="{StaticResource TextBoxLabelDefaultColorBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{StaticResource TextBoxFilledIndicatorColorBrush}" />
    <Setter Property="CornerRadius" Value="{StaticResource TextBoxOutlinedCorderRadius}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="12,4,8,4" />
    <Setter Property="MinHeight" Value="50" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource MaterialOnSurfaceBrush}" />
                    <!-- In this case the opacity is not applied to the brush -->
                    <Setter Target="ContentElement.Opacity" Value="{StaticResource MaterialLowOpacity}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource TextBoxFilledFocusIndicatorColorBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource TextBoxLabelFocusColorBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="DeleteButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
                    <DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" MaxHeight="34" MaxWidth="34" MinWidth="25" Margin="0,0,8,0" VerticalAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
            <ScrollViewer x:Name="ContentElement" Grid.Column="1" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ZoomMode="Disabled" AutomationProperties.AccessibilityView="Raw">
              <ScrollViewer.RenderTransform>
                <CompositeTransform x:Name="ContentElement_CompositeTransform" />
              </ScrollViewer.RenderTransform>
            </ScrollViewer>
            <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <TextBlock.RenderTransform>
                <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
              </TextBlock.RenderTransform>
            </TextBlock>
            <Button x:Name="DeleteButton" Grid.Column="2" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Style="{StaticResource DeleteButtonStyle}" VerticalAlignment="Stretch" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\TimePicker.xaml-->
  <Style x:Key="TimePickerFlyoutButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Label -->
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ios:Style x:Key="MaterialTimePickerFlyoutPresenterStyle" TargetType="TimePickerFlyoutPresenter">
    <Setter Property="Background" Value="{ThemeResource TimePickerFlyoutPresenterBackground}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Bottom" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="AutomationProperties.AutomationId" Value="TimePickerFlyoutPresenter" />
    <ios:Setter Property="FlyoutPresenterStyle" Value="{StaticResource MaterialTimePickerFlyoutPresenterStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TimePickerFlyoutPresenter">
          <Grid x:Name="ContentPanel" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" x:Name="AcceptDismissHostGrid" Height="44">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Button Grid.Column="0" x:Name="DismissButton" x:Uid="TimePickerFlyoutDismissButton" Content="Cancel" HorizontalAlignment="Left" Foreground="{ThemeResource MaterialPrimaryBrush}" Style="{StaticResource IosPickerFlyoutTextButtonStyle}" />
              <Button Grid.Column="2" x:Name="AcceptButton" x:Uid="TimePickerFlyoutAcceptButton" Content="Done" FontWeight="Bold" HorizontalAlignment="Right" Foreground="{ThemeResource MaterialPrimaryBrush}" Style="{StaticResource IosPickerFlyoutTextButtonStyle}" />
            </Grid>
            <ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ios:Style>
  <Style x:Key="MaterialTimePickerStyle" TargetType="TimePicker">
    <Setter Property="Background" Value="{StaticResource TextBoxFilledBackgroundColorBrush}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialPrimaryBrush}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Height" Value="53" />
    <Setter Property="CornerRadius" Value="4,4,0,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TimePicker">
          <Grid x:Name="LayoutRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HeaderTextBlock.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="HourTextBlock.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="ColonText.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="MinuteTextBlock.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="PeriodTextBlock.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                    <Setter Target="BottomBorder.Fill" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HasTimeStates">
                <VisualState x:Name="HasTime">
                  <VisualState.Setters>
                    <Setter Target="FlyoutButtonContentGrid.Visibility" Value="Visible" />
                    <Setter Target="PlaceholderContentGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="HasNoTime">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderContentGrid.Visibility" Value="Visible" />
                    <Setter Target="FlyoutButtonContentGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Flyout Button -->
            <Button x:Name="FlyoutButton" Style="{StaticResource TimePickerFlyoutButtonStyle}" IsEnabled="{TemplateBinding IsEnabled}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
              <Grid Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" Height="{TemplateBinding Height}">
                <!-- Border -->
                <Rectangle x:Name="BottomBorder" Fill="{TemplateBinding BorderBrush}" VerticalAlignment="Bottom" Height="2" />
                <!-- Header -->
                <TextBlock x:Name="HeaderTextBlock" Text="{TemplateBinding Header}" Style="{StaticResource MaterialCaption}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Stretch" VerticalAlignment="Top" TextWrapping="Wrap" Margin="10,8,10,0" />
                <Grid x:Name="PlaceholderContentGrid" VerticalAlignment="Top" Visibility="Collapsed" Margin="10,24,10,0" Height="24">
                  <!-- Placeholder -->
                  <TextBlock Text="00:00" Style="{StaticResource MaterialBody2}" Foreground="{StaticResource MaterialOnSurfaceLowBrush}" />
                </Grid>
                <Grid x:Name="FlyoutButtonContentGrid" VerticalAlignment="Top" Margin="10,24,10,0" Height="24">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <!-- Hours -->
                  <TextBlock x:Name="HourTextBlock" Style="{StaticResource MaterialBody2}" TextAlignment="Right" AutomationProperties.AccessibilityView="Raw" Grid.Column="0" />
                  <!-- : -->
                  <TextBlock x:Name="ColonText" Text=":" Style="{StaticResource MaterialBody2}" Grid.Column="1" />
                  <!-- Minutes -->
                  <Border x:Name="SecondPickerHost" Grid.Column="2">
                    <TextBlock x:Name="MinuteTextBlock" Style="{StaticResource MaterialBody2}" AutomationProperties.AccessibilityView="Raw" />
                  </Border>
                  <!-- AM/PM -->
                  <Border x:Name="ThirdPickerHost" Grid.Column="4">
                    <TextBlock x:Name="PeriodTextBlock" Style="{StaticResource MaterialBody2}" AutomationProperties.AccessibilityView="Raw" />
                  </Border>
                </Grid>
              </Grid>
            </Button>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\ToggleButton.xaml-->
  <SolidColorBrush x:Key="ToggleButtonTextLabelBrush" Color="{ThemeResource MaterialPrimaryColor}" />
  <StaticResource x:Key="ToggleButtonForegroundThemeBrush" ResourceKey="MaterialOnSurfaceBrush" />
  <CornerRadius x:Key="ToggleButtonBorderRadius">4</CornerRadius>
  <x:Double x:Key="ToggleButtonFontSize">14</x:Double>
  <Thickness x:Key="ToggleButtonPadding">16,8</Thickness>
  <Style x:Key="MaterialTextToggleButtonStyle" TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{StaticResource ToggleButtonTextLabelBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{ThemeResource ToggleButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource ToggleButtonBorderRadius}" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="FontFamily" Value="{ThemeResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource ToggleButtonFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <xamarin:VisualState x:Name="Pressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </xamarin:VisualState>
                <win:VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </win:VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Border for PointedOver State -->
            <Border x:Name="HoverOverlay" Background="{StaticResource MaterialOnSurfaceHoverBrush}" Opacity="0" />
            <!-- Border for Focus State -->
            <Border x:Name="FocusedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
            <!-- Border for Dragged/Selected State -->
            <!-- Todo: Add ElevatedView on Dragged/Selected state of button -->
            <Border x:Name="SelectedOverlay" Background="{StaticResource MaterialOnSurfaceFocusedBrush}" Opacity="0" />
            <!-- Ripple effect -->
            <um:Ripple x:Name="ContentPresenter" Feedback="{StaticResource MaterialOnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{TemplateBinding CornerRadius}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialToggleButtonIconStyle" TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{StaticResource ToggleButtonForegroundThemeBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.AlternateContent" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Foreground" Value="{StaticResource MaterialOnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Ellipse for PointedOver State -->
            <Ellipse x:Name="HoverOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource MaterialPrimaryHoverBrush}" Opacity="0" />
            <!-- Ellipse for Pressed State -->
            <Ellipse x:Name="PressedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource MaterialPrimaryPressedBrush}" Opacity="0" />
            <!-- Content -->
            <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            <!-- Alternate Content -->
            <ContentPresenter x:Name="AlternateContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{Binding Path=(um:ControlExtensions.AlternateContent), RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v1\ToggleSwitch.Base.xaml-->
  <SolidColorBrush x:Key="MaterialPrimaryVariantLowThumbColorBrush" Color="{ThemeResource MaterialPrimaryVariantLowThumbColor}" />
  <SolidColorBrush x:Key="MaterialSurfaceVariantBrush" Color="{ThemeResource MaterialSurfaceVariantLightColor}" />
  <SolidColorBrush x:Key="MaterialToggleSwitchOnButtonBrush" Color="{ThemeResource MaterialPrimaryColor}" />
  <SolidColorBrush x:Key="MaterialToggleSwitchOnBackgroundBrush" Color="{ThemeResource MaterialPrimaryVariantLightColor}" />
  <StaticResource x:Key="MaterialToggleSwitchOffButtonBrush" ResourceKey="MaterialSurfaceVariantBrush" />
  <StaticResource x:Key="MaterialToggleSwitchOffBackgroundBrush" ResourceKey="MaterialOnSurfaceLowVariantBrush" />
  <SolidColorBrush x:Key="AndroidSelectControlToggleOffButtonBrush" Color="#FFFAFAFA" />
  <StaticResource x:Key="MaterialToggleSwitchOnLowButtonBrush" ResourceKey="MaterialPrimaryVariantLowThumbColorBrush" />
  <StaticResource x:Key="MaterialToggleSwitchOnLowBackgroundBrush" ResourceKey="MaterialPrimaryDraggedBrush" />
  <!--origin: Styles\Controls\v1\ToggleSwitch.Mobile.xaml-->
  <ios:Style x:Key="MaterialToggleSwitchStyle" TargetType="ToggleSwitch">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleSwitchOnButtonBrush}" />
    <!-- microsoft/microsoft-ui-xaml#6157: reset min-width inherited from base style -->
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="Padding" Value="9,0,10,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleSwitch">
          <StackPanel Padding="{TemplateBinding Padding}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch">
            <!-- The margin here is used to properly align the content with the UI switch -->
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{StaticResource MaterialOnBackgroundBrush}" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Header, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed},TargetNullValue=Collapsed}" Margin="0,8,0,5" />
            <!-- Do not add x:Name to BindableUiSwitch or else page will not load -->
            <BindableUISwitch Background="{TemplateBinding Foreground}" IsOn="{TemplateBinding IsOn, Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ios:Style>
  <android:Style x:Key="MaterialToggleSwitchStyle" TargetType="ToggleSwitch">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleSwitchOnButtonBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="MinHeight" Value="25" />
    <!-- microsoft/microsoft-ui-xaml#6157: reset min-width inherited from base style -->
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleSwitch">
          <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" Padding="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="SwitchGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ToggleStates">
                <VisualState x:Name="Dragging" />
                <VisualState x:Name="Off">
                  <VisualState.Setters>
                    <Setter Target="AndroidSwitch.TrackTint" Value="{StaticResource MaterialToggleSwitchOffBackgroundBrush}" />
                    <Setter Target="OnDisabledGrid.Visibility" Value="Collapsed" />
                    <Setter Target="OffDisabledGrid.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="On">
                  <VisualState.Setters>
                    <Setter Target="AndroidSwitch.TrackTint" Value="{StaticResource MaterialToggleSwitchOnBackgroundBrush}" />
                    <Setter Target="OnDisabledGrid.Visibility" Value="Visible" />
                    <Setter Target="OffDisabledGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!-- The margin here is used to properly align the content with the UI switch -->
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{StaticResource MaterialOnBackgroundBrush}" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.ColumnSpan="3" />
            <!-- TODO: fix disabled on thumbtint, using MaterialToggleSwitchOnLowButtonBrush -> OnPrimaryMedium shows a transparent opacity with android native toggleswitch -->
            <!-- Grid is used because we can not collapse the visibility of a BindableSwitchCompat -->
            <Grid x:Name="OnDisabledGrid" Grid.Column="2" Grid.Row="1">
              <!-- Provides a disabled state for an on switch -->
              <BindableSwitchCompat Checked="{TemplateBinding IsOn, Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" ThumbTint="{ThemeResource MaterialToggleSwitchOnLowButtonBrush}" TrackTint="{ThemeResource MaterialToggleSwitchOnLowBackgroundBrush}" />
            </Grid>
            <!-- Grid is used because we can not collapse the visibility of a BindableSwitchCompat -->
            <Grid x:Name="OffDisabledGrid" Grid.Column="2" Grid.Row="1">
              <!-- Provides a disabled state for an off switch -->
              <BindableSwitchCompat Checked="{TemplateBinding IsOn, Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" ThumbTint="{StaticResource MaterialToggleSwitchOffButtonBrush}" TrackTint="{StaticResource MaterialToggleSwitchOffBackgroundBrush}" />
            </Grid>
            <!-- Grid is used because we can not collapse the visibility of a BindableSwitchCompat -->
            <Grid x:Name="SwitchGrid" Grid.Column="2" Grid.Row="1">
              <BindableSwitchCompat x:Name="AndroidSwitch" Checked="{TemplateBinding IsOn, Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </android:Style>
  <android:Style x:Key="MaterialSecondaryToggleSwitchStyle" TargetType="ToggleSwitch">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialPrimaryVariantLightBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialPrimaryVariantDarkBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="MinHeight" Value="25" />
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleSwitch">
          <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" Padding="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="SwitchGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ToggleStates">
                <VisualState x:Name="Dragging" />
                <VisualState x:Name="Off">
                  <VisualState.Setters>
                    <Setter Target="AndroidSwitch.ThumbTint" Value="{StaticResource AndroidSelectControlToggleOffButtonBrush}" />
                    <Setter Target="AndroidSwitch.TrackTint" Value="{StaticResource MaterialToggleSwitchOffBackgroundBrush}" />
                    <Setter Target="OnDisabledGrid.Visibility" Value="Collapsed" />
                    <Setter Target="OffDisabledGrid.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="On">
                  <VisualState.Setters>
                    <Setter Target="AndroidSwitch.TrackTint" Value="{StaticResource MaterialSecondaryVariantLightBrush}" />
                    <Setter Target="AndroidSwitch.ThumbTint" Value="{StaticResource MaterialSecondaryVariantDarkBrush}" />
                    <Setter Target="OnDisabledGrid.Visibility" Value="Visible" />
                    <Setter Target="OffDisabledGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!-- The margin here is used to properly align the content with the UI switch -->
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{StaticResource MaterialOnBackgroundBrush}" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.ColumnSpan="3" />
            <!-- TODO: fix disabled on thumbtint, using MaterialToggleSwitchOnLowButtonBrush -> OnPrimaryMedium shows a transparent opacity with android native toggleswitch -->
            <!-- Grid is used because we can not collapse the visibility of a BindableSwitchCompat -->
            <Grid x:Name="OnDisabledGrid" Grid.Column="2" Grid.Row="1">
              <!-- Provides a disabled state for an on switch -->
              <BindableSwitchCompat Checked="{TemplateBinding IsOn, Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" ThumbTint="{StaticResource MaterialToggleSwitchOnLowButtonBrush}" TrackTint="{StaticResource MaterialToggleSwitchOnLowBackgroundBrush}" />
            </Grid>
            <!-- Grid is used because we can not collapse the visibility of a BindableSwitchCompat -->
            <Grid x:Name="OffDisabledGrid" Grid.Column="2" Grid.Row="1">
              <!-- Provides a disabled state for an off switch -->
              <BindableSwitchCompat Checked="{TemplateBinding IsOn, Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" ThumbTint="{StaticResource MaterialToggleSwitchOffButtonBrush}" TrackTint="{StaticResource MaterialToggleSwitchOffBackgroundBrush}" />
            </Grid>
            <!-- Grid is used because we can not collapse the visibility of a BindableSwitchCompat -->
            <Grid x:Name="SwitchGrid" Grid.Column="2" Grid.Row="1">
              <BindableSwitchCompat x:Name="AndroidSwitch" Checked="{TemplateBinding IsOn, Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </android:Style>
  <ios:Style x:Key="MaterialSecondaryToggleSwitchStyle" TargetType="ToggleSwitch" BasedOn="{StaticResource MaterialToggleSwitchStyle}">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryVariantDarkBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryVariantLightBrush}" />
  </ios:Style>
  <!--origin: Styles\Controls\v1\ToggleSwitch.xaml-->
  <not_mobile:Style x:Key="MaterialToggleSwitchStyle" TargetType="ToggleSwitch">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleSwitchOnButtonBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialToggleSwitchOnBackgroundBrush}" />
    <!-- microsoft/microsoft-ui-xaml#6157: reset min-width inherited from base style -->
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FontSize" Value="15" />
    <Setter Property="ManipulationMode" Value="System,TranslateX" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleSwitch">
          <Grid Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="SwitchKnobOnShadow.Opacity" Value="0.1" />
                    <Setter Target="SwitchKnobOffShadow.Opacity" Value="0.1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0.3" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0.3" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOnLowBackgroundBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOnLowButtonBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOnLowButtonBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="SwitchKnobOnShadow.Opacity" Value="0.2" />
                    <Setter Target="SwitchKnobOffShadow.Opacity" Value="0.2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="SwitchKnobOnShadow.Opacity" Value="0" />
                    <Setter Target="SwitchKnobOffShadow.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ToggleStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition x:Name="DraggingToOnTransition" From="Dragging" To="On" GeneratedDuration="0">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition x:Name="DraggingToOffTransition" From="Dragging" To="Off" GeneratedDuration="0">
                    <Storyboard />
                  </VisualTransition>
                  <VisualTransition x:Name="OnToOffTransition" From="On" To="Off" GeneratedDuration="0">
                    <Storyboard />
                  </VisualTransition>
                  <VisualTransition x:Name="OffToOnTransition" From="Off" To="On" GeneratedDuration="0">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Dragging" />
                <VisualState x:Name="Off">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="On">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="KnobTranslateTransform" Storyboard.TargetProperty="X" To="20" Duration="0" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ContentStates">
                <VisualState x:Name="OffContent">
                  <Storyboard />
                </VisualState>
                <VisualState x:Name="OnContent">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="OnContentPresenter" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible" Storyboard.TargetName="OnContentPresenter">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <x:Boolean>True</x:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="10" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="10" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="12" MaxWidth="12" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock Text="{TemplateBinding Header}" Style="{StaticResource MaterialBody2}" Foreground="{StaticResource MaterialOnBackgroundBrush}" Visibility="{Binding Header, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed},TargetNullValue=Collapsed}" Grid.ColumnSpan="4" />
            <ContentPresenter x:Name="OnContentPresenter" Grid.Row="1" Grid.RowSpan="3" Grid.Column="2" Opacity="0" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <Grid Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="3" Control.IsTemplateFocusTarget="True" />
            <!-- Marker element used to compute draggable zone -->
            <Rectangle x:Name="SwitchKnobBounds" Grid.Row="2" />
            <Rectangle x:Name="OuterBorder" Grid.Row="2" Margin="10,0" Height="14" Width="36" RadiusX="8" RadiusY="8" Fill="{StaticResource MaterialToggleSwitchOffBackgroundBrush}" />
            <Rectangle x:Name="HighlightBorder" Grid.Row="2" Margin="10,0" Height="14" Width="36" RadiusX="8" RadiusY="8" Fill="{TemplateBinding Background}" Opacity="0" />
            <Grid x:Name="SwitchKnob" Grid.Row="2" HorizontalAlignment="Left" Width="40" Height="40">
              <Grid.RenderTransform>
                <TranslateTransform x:Name="KnobTranslateTransform" />
              </Grid.RenderTransform>
              <Ellipse x:Name="SwitchKnobOnShadow" Fill="{TemplateBinding Foreground}" Width="40" Height="40" Opacity="0" Visibility="Collapsed" />
              <Ellipse x:Name="SwitchKnobOffShadow" Fill="#FF808080" Width="40" Height="40" Opacity="0" />
              <toolkit:ElevatedView Width="20" Height="20" Elevation="4" CornerRadius="10" ShadowColor="Black" Background="Transparent" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Grid>
                  <Ellipse x:Name="SwitchKnobOn" Fill="{TemplateBinding Foreground}" Width="20" Height="20" Opacity="0" />
                  <Ellipse x:Name="SwitchKnobOff" Fill="{StaticResource MaterialToggleSwitchOffButtonBrush}" Width="20" Height="20" />
                </Grid>
              </toolkit:ElevatedView>
            </Grid>
            <Thumb x:Name="SwitchThumb" AutomationProperties.AccessibilityView="Raw" Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="3">
              <Thumb.Template>
                <ControlTemplate TargetType="Thumb">
                  <Rectangle Fill="Transparent" />
                </ControlTemplate>
              </Thumb.Template>
            </Thumb>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <not_mobile:Style x:Key="MaterialSecondaryToggleSwitchStyle" TargetType="ToggleSwitch" BasedOn="{StaticResource MaterialToggleSwitchStyle}">
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryVariantDarkBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryVariantLightBrush}" />
  </not_mobile:Style>
  <!--origin: Styles\Controls\v1\_Resources.xaml-->
  <!--origin: Styles\Application\AnimationConstants.xaml-->
  <CubicEase x:Key="MaterialEaseInOutFunction" EasingMode="EaseInOut" />
  <CubicEase x:Key="MaterialEaseOutFunction" EasingMode="EaseOut" />
  <Duration x:Key="MaterialAnimationDuration">0:0:0.25</Duration>
  <Duration x:Key="MaterialTextBoxAnimationDuration">0:0:0.25</Duration>
  <x:String x:Key="MaterialDelayedBeginTime">0:0:0.15</x:String>
  <!--origin: Styles\Application\Converters.xaml-->
  <um:FromBoolToValueConverter x:Name="MaterialTrueToVisible" TrueValue="Visible" FalseValue="Collapsed" NullValue="Collapsed" />
  <um:FromBoolToValueConverter x:Name="MaterialTrueToCollapsed" TrueValue="Collapsed" FalseValue="Visible" NullValue="Visible" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToFalse" NotNullOrEmptyValue="True" NullOrEmptyValue="False" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToTrue" NotNullOrEmptyValue="False" NullOrEmptyValue="True" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToVisible" NotNullOrEmptyValue="Collapsed" NullOrEmptyValue="Visible" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToCollapsed" NotNullOrEmptyValue="Visible" NullOrEmptyValue="Collapsed" />
  <um:FromNullToValueConverter x:Key="MaterialNullToCollapsedConverter" NotNullValue="Visible" NullValue="Collapsed" />
  <um:FromNullToValueConverter x:Key="MaterialNullToVisibleConverter" NotNullValue="Visible" NullValue="Collapsed" />
  <um:FromEmptyStringOrNullObjectToValueConverter x:Key="MaterialEmptyOrNullToVisible" NotEmptyOrNullValue="Collapsed" EmptyOrNullValue="Visible" />
  <um:FromEmptyStringOrNullObjectToValueConverter x:Key="MaterialEmptyOrNullToCollapsed" NotEmptyOrNullValue="Visible" EmptyOrNullValue="Collapsed" />
  <um:StringFormatConverter x:Key="StringFormatConverter" />
  <um:FirstCharacterConverter x:Key="FirstCharacterConverter" />
  <!--origin: Styles\Application\TextBoxVariables.xaml-->
  <StaticResource x:Key="TextBoxLabelDefaultColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxLabelFocusColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="TextBoxIconColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <x:Double x:Key="TextBoxFocusStrokeWidth">2</x:Double>
  <SolidColorBrush x:Key="TextBoxFilledBackgroundColorBrush" Color="{ThemeResource MaterialOnSurfaceColor}" Opacity="0.12" />
  <StaticResource x:Key="TextBoxFilledIndicatorColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxFilledFocusIndicatorColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <x:Double x:Key="TextBoxOutlinedStrokeWidth">1</x:Double>
  <StaticResource x:Key="TextBoxOutlinedStrokeColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxOutlinedFocusStrokeColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <x:Double x:Key="TextBoxOutlinedCorderRadius">4</x:Double>
</ResourceDictionary>